# application
quarkus.application.name=price-cache
quarkus.http.port=8080

# datasource
## UAE
quarkus.datasource.db-kind=mssql
quarkus.datasource.username=sa
quarkus.datasource.password=sanP@ssw0rd
quarkus.datasource.jdbc.url=jdbc:sqlserver://local.sqlserver:1433;databaseName=ROBIN_UAE_UAT_DB;trustServerCertificate=true
quarkus.datasource.jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
quarkus.hibernate-orm.database.generation=none
## Qatar
quarkus.datasource.qatar.db-kind=mssql
quarkus.datasource.qatar.username=robin_user
quarkus.datasource.qatar.password=wRxXMBz3K49u
quarkus.datasource.qatar.jdbc.url=jdbc:sqlserver://local.sqlserver:1433;databaseName=ROBIN_QATAR;trustServerCertificate=true
quarkus.datasource.qatar.jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
## KSA
quarkus.datasource.ksa.db-kind=mssql
quarkus.datasource.ksa.username=sa
quarkus.datasource.ksa.password=sanP@ssw0rd
quarkus.datasource.ksa.jdbc.url=jdbc:sqlserver://local.sqlserver:1433;databaseName=ACCUMED_JHAH;trustServerCertificate=true
quarkus.datasource.ksa.jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver


# redis
## UAE
quarkus.redis.hosts=redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@local.redis:6379
quarkus.redis.timeout=600000
## Qatar
quarkus.redis.qatar.hosts=redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@local.redis:6379/1
quarkus.redis.qatar.timeout=600000
## KSA
quarkus.redis.ksa.hosts=redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@local.redis:6379/2
quarkus.redis.ksa.timeout=600000
quarkus.vertx.warning-exception-time=600
# consul
consul.host=local.consul
consul.port=8500
quarkus.consul.check.http.path=q/health/well
container.name=${HOSTNAME:localhost}
quarkus.consul.host=local.consul
registration.status=true

# stork
quarkus.stork.price-engine.service-discovery.type=consul
quarkus.stork.price-engine.service-discovery.consul-host=local.consul
quarkus.stork.price-engine.service-discovery.consul-port=8500
quarkus.stork.price-engine.load-balancer.type=round-robin

#
quarkus.shutdown.delay-enabled=true
#quarkus.shutdown.delay=10
#quarkus.console.color=true

# opentelemetry
quarkus.otel.exporter.otlp.traces.endpoint=http://local.agent:4317

# log
quarkus.log.console.format=%d{HH:mm:ss} %-5p [${quarkus.application.name}] traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, [%c{5.}] (%t) %s%e%n
quarkus.console.color=true
# api
price.cache.redis.all.info.key=price-cache-info:all
price.cache.redis.general.info.key=price-cache-info
price.cache.redis.last.update.field=lastCache
price.cache.redis.status.field=status
price.cache.redis.progress.status.field=progressStatus
price.cache.redis.progress.size.field=size
price.cache.redis.progress.records.field=recordAmount


# Kafka
# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=local.kafka:9092

# Configuring the outgoing channel (writing update models keys to Kafka)
mp.messaging.outgoing.price-cache-management.connector=smallrye-kafka
mp.messaging.outgoing.price-cache-management.topic=price-cache-management

# Configuring the outgoing channel (writing update models keys to Kafka)
mp.messaging.outgoing.price-cache-management-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-cache-management-qatar.topic=price-cache-management-qatar

# Configuring the outgoing channel (writing update models keys to Kafka)
mp.messaging.outgoing.price-cache-management-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-cache-management-ksa.topic=price-cache-management-ksa


