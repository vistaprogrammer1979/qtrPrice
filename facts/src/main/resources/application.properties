# application
quarkus.application.name=price-fact
quarkus.http.port=${HTTP_PORT:8080}
#container.name=${HOSTNAME:localhost}
# consul

consul.host=${CONSUL_HOST:localhost}
consul.port=${CONSUL_PORT:8500}

quarkus.consul.host=${HOSTNAME:host.docker.internal}
quarkus.consul.check.http.path=q/health/well


#DB
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USERNAME:SA}
quarkus.datasource.password=${DB_PASSWORD:P@ssw0rd123}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:192.168.1.33}:5432/${DB_NAME:SA}
quarkus.hibernate-orm.database.default-schema=price
quarkus.hibernate-orm.jdbc.batch_size=50
quarkus.datasource.jdbc.min-size=10
quarkus.datasource.jdbc.max-size=50
##quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/postgres
#quarkus.hibernate-orm.database.generation=drop-and-create
#quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=false
#quarkus.datasource.jdbc.max-size=8
#quarkus.datasource.jdbc.min-size=2
quarkus.hibernate-orm.physical-naming-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy


#OpenTelemetry
quarkus.otel.exporter.otlp.traces.endpoint=http://${OTEL_HOST:localhost}:${OTEL_PORT:4317}
quarkus.log.console.format=%d{HH:mm:ss} %-5p [${quarkus.application.name}] traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, [%c{5.}] (%t) %s%e%n
#quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret
quarkus.console.color=true
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.username=postgres
#quarkus.datasource.password=postgres
#quarkus.datasource.reactive.url=postgresql://localhost:5432/postgres

#quarkus.datasource.db-kind=mssql
##quarkus.datasource.username=${DATASOURCE_USERNAME:AccumedDEV}
#quarkus.datasource.username=${DATASOURCE_USERNAME:sa}
##quarkus.datasource.password=${DATASOURCE_PASSWORD:P@ssw0rd}
#quarkus.datasource.password=${DATASOURCE_PASSWORD:sanP@ssw0rd5}
#quarkus.datasource.jdbc.url=jdbc:sqlserver://${DATASOURCE_HOST:localhost}:${DATASOURCE_PORT:1433};databaseName=${DATASOURCE_DB:ROBIN_UAE_UAT_DB};trustServerCertificate=true
#quarkus.datasource.jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver


#quarkus.datasource.db-kind=mssql
#quarkus.datasource.username=sa
#quarkus.datasource.password=sanP@ssw0rd5
#quarkus.datasource.jdbc.url=jdbc:sqlserver://${QUARKUS_DATASOURCE_HOST:localhost}:${QUARKUS_DATASOURCE_PORT:1433};;databaseName=${QUARKUS_DATASOURCE_DB:ROBIN_UAE_UAT_DB};trustServerCertificate=true
#quarkus.datasource.jdbc.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
#quarkus.datasource.reactive.url=sqlserver://192.168.1.42:1433/Thynk_UAE


#quarkus.datasource.db-kind=mssql
#quarkus.datasource.username=quarkus_test
#quarkus.datasource.password=quarkus_test
#quarkus.datasource.reactive.url=sqlserver://localhost:1433;databaseName=Thynk_UAE


quarkus.stork.price-engine.service-discovery.type=consul
quarkus.stork.price-engine.service-discovery.consul-host=${CONSUL_HOST:localhost}
quarkus.stork.price-engine.service-discovery.consul-port=${CONSUL_PORT:8500}
quarkus.stork.price-engine.load-balancer.type=round-robin

quarkus.stork.price-engine-qatar.service-discovery.type=consul
quarkus.stork.price-engine-qatar.service-discovery.consul-host=${CONSUL_HOST:localhost}
quarkus.stork.price-engine-qatar.service-discovery.consul-port=${CONSUL_PORT:8500}
quarkus.stork.price-engine-qatar.load-balancer.type=round-robin

quarkus.stork.price-engine-ksa.service-discovery.type=consul
quarkus.stork.price-engine-ksa.service-discovery.consul-host=${CONSUL_HOST:localhost}
quarkus.stork.price-engine-ksa.service-discovery.consul-port=${CONSUL_PORT:8500}
quarkus.stork.price-engine-ksa.load-balancer.type=round-robin


quarkus.redis.qatar.hosts=redis://:${REDIS_PASSWORD:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81}@${REDIS_HOST:localhost}:${REDIS_PORT:6379}
#quarkus.redis.qatar.hosts=redis://192.168.1.33:7000,redis://192.168.1.33:7001,redis://192.168.1.33:7002,redis://192.168.1.35:7003,redis://192.168.1.35:7004,redis://192.168.1.35:7005
#quarkus.redis.qatar.client-type = cluster
#quarkus.redis.qatar.cluster=true
#quarkus.redis.qatar.max-pool-active=500
#quarkus.redis.qatar.max-pool-size=700
#quarkus.redis.qatar.max-pool-waiting=1000
#quarkus.redis.qatar.min-pool-idle=100
#quarkus.redis.qatar.max-pool-idle=400
#quarkus.redis.qatar.max-pool-wait-millis=2000

# Pool Tuning (High Traffic)
quarkus.redis.qatar.max-pool-size=1000
quarkus.redis.qatar.min-pool-size=200
quarkus.redis.qatar.max-pool-waiting=5000
quarkus.redis.qatar.max-pool-wait-millis=30000
quarkus.log.category."io.vertx.redis".level=DEBUG

quarkus.redis.ksa.hosts=redis://:${REDIS_PASSWORD:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81}@${REDIS_HOST:localhost}:${REDIS_PORT:6379}/2
quarkus.redis.ksa.max-pool-active=500
quarkus.redis.ksa.max-pool-size=700
quarkus.redis.ksa.max-pool-waiting=1000
quarkus.redis.ksa.min-pool-idle=100
quarkus.redis.ksa.max-pool-idle=400
quarkus.redis.ksa.max-pool-wait-millis=2000

## Maximum total connections in the pool
#quarkus.redis.ksa.max-pool-size=700
#
## Minimum idle connections to maintain
#quarkus.redis.ksa.min-pool-idle=100
#
## Maximum idle connections to maintain
#quarkus.redis.ksa.max-pool-idle=400
#
## Max time (ms) to wait for a connection
#quarkus.redis.ksa.max-wait-time=2000
#
## Max number of requests waiting for a connection
#quarkus.redis.ksa.max-waiting-handlers=1000


#quarkus.redis.ksa.test-on-borrow=true
#quarkus.redis.ksa.test-on-return=true
#quarkus.redis.ksa.test-while-idle=true
#quarkus.redis.ksa.time-between-eviction-runs=60000
#quarkus.redis.time-between-eviction-runs = 60000
#quarkus.redis.ksa.min-evictable-idle-time-millis=120000
#quarkus.redis.ksa.hosts=redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@localhost:26379,redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@localhost:26380,redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@localhost:26381
#quarkus.redis.ksa.client-type=sentinel

quarkus.shutdown.delay-enabled=true
#quarkus.shutdown.delay=10

# Kafka
# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=${KAFKA_SERVERS:localhost}:${KAFKA_PORT:29092}

# Configuring the outgoing channel (writing request to Kafka)
mp.messaging.outgoing.price-engine-fact.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-fact.topic=price-engine-fact
mp.messaging.outgoing.price-engine-fact.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#
## Configuring the outgoing channel (writing response to Kafka)
#mp.messaging.outgoing.price-engine-responses.connector=smallrye-kafka
#mp.messaging.outgoing.price-engine-responses.topic=price-engine-response
#mp.messaging.outgoing.price-engine-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
##mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses.topic=price-engine-failure-response
mp.messaging.outgoing.price-engine-failure-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs.topic=price-engine-log
mp.messaging.outgoing.price-engine-logs.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the incoming channel (writing logs response to Kafka)
mp.messaging.incoming.price-cache-management.connector=smallrye-kafka
mp.messaging.incoming.price-cache-management.auto.commit=true
mp.messaging.incoming.price-cache-management.group.id=${quarkus.uuid}
mp.messaging.incoming.price-cache-management.topic=price-cache-management
mp.messaging.incoming.price-cache-management.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

## Qatar
# Configuring the outgoing channel (writing request to Kafka)
mp.messaging.outgoing.price-engine-fact-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-fact-qatar.topic=price-engine-fact-qatar
mp.messaging.outgoing.price-engine-fact-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs-qatar.topic=price-engine-log-qatar
mp.messaging.outgoing.price-engine-logs-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the incoming channel (writing logs response to Kafka)
mp.messaging.incoming.price-cache-management-qatar.connector=smallrye-kafka
mp.messaging.incoming.price-cache-management-qatar.auto.commit=true
mp.messaging.incoming.price-cache-management-qatar.group.id=${quarkus.uuid}
mp.messaging.incoming.price-cache-management-qatar.topic=price-cache-management-qatar
mp.messaging.incoming.price-cache-management-qatar.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
## Configuring the outgoing channel (writing response to Kafka)
#mp.messaging.outgoing.price-engine-responses-qatar.connector=smallrye-kafka
#mp.messaging.outgoing.price-engine-responses-qatar.topic=price-engine-response-qatar
#mp.messaging.outgoing.price-engine-responses-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
##mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#
## Configuring the outgoing channel (writing failure response to Kafka)
#mp.messaging.outgoing.price-engine-failure-responses-qatar.connector=smallrye-kafka
#mp.messaging.outgoing.price-engine-failure-responses-qatar.topic=price-engine-failure-response-qatar
#mp.messaging.outgoing.price-engine-failure-responses-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
##mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# KSA
# Configuring the outgoing channel (writing request to Kafka)
mp.messaging.outgoing.price-engine-fact-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-fact-ksa.topic=price-engine-fact-ksa
mp.messaging.outgoing.price-engine-fact-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs-ksa.topic=price-engine-log-ksa
mp.messaging.outgoing.price-engine-logs-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the incoming channel (writing logs response to Kafka)
mp.messaging.incoming.price-cache-management-ksa.connector=smallrye-kafka
mp.messaging.incoming.price-cache-management-ksa.auto.commit=true
mp.messaging.incoming.price-cache-management-ksa.group.id=${quarkus.uuid}
mp.messaging.incoming.price-cache-management-ksa.topic=price-cache-management-ksa
mp.messaging.incoming.price-cache-management-ksa.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configuring the outgoing channel (writing response to Kafka)
mp.messaging.outgoing.price-engine-responses-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-responses-ksa.topic=price-engine-response-ksa
mp.messaging.outgoing.price-engine-responses-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses-ksa.topic=price-engine-failure-response-ksa
mp.messaging.outgoing.price-engine-failure-responses-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer



quarkus.swagger-ui.always-include=true

quarkus.hibernate-orm.database.generation=validate
quarkus.flyway.enabled=true
#"if schema is non-empty call baseline implicitly now"
quarkus.flyway.baseline-on-migrate = true
# desired baseline version
quarkus.flyway.baseline-version=0
# Run Flyway migrations automatically
quarkus.flyway.migrate-at-start=true
quarkus.flyway.default-schema= ${quarkus.hibernate-orm.database.default-schema}
quarkus.flyway.username=${quarkus.datasource.username}
quarkus.flyway.password=${quarkus.datasource.password}
quarkus.flyway.locations=db/migration

