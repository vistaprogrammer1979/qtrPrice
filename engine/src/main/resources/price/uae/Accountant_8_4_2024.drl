package com.santechture.price.uae;


//rule test when
//
//    then
//    System.out.print("\n\n hello \n\n");
// end
import java.util.ArrayList
import java.util.Set
import com.santechture.request.ClaimType
import com.santechture.request.Workflow
import com.santechture.Facility
import com.santechture.request.ObservationOutcome
import com.santechture.SPCCodeFactor
import com.santechture.request.Activity
import com.santechture.ObseleteEncounter
import com.santechture.request.Diagnosis
import com.santechture.request.ClaimOutcome
import com.santechture.dao.DAO
import com.santechture.request.ActivityOutcome
import com.santechture.request.WorkflowOutcome
import com.santechture.request.Contract
import com.santechture.CusPricList
import com.santechture.request.DiagnosisOutcome
import com.santechture.request.AppliedDeductible
import com.santechture.SPCGroupFactor
import com.santechture.request.EncounterOutcome
import com.santechture.GroupCodesRange
import com.santechture.CusContract
import com.santechture.SPCContract
import com.santechture.request.AppliedCopayment
import com.santechture.ObseleteClaim
import com.santechture.request.Request
import com.santechture.request.Authorisation
import com.santechture.request.PatientInsurance
import com.santechture.request.ExtendedValidationType
import com.santechture.Severity
import com.santechture.request.Encounter
import com.santechture.ObseleteActivity
import com.santechture.request.PatientOutcome
import com.santechture.ControlFact
import com.santechture.request.Observation
import com.santechture.DrugPrice
import com.santechture.request.ContractOutcome
import com.santechture.request.CodeType
import com.santechture.request.ActivityGroup
import com.santechture.CusPriceListItem
import com.santechture.ObseleteClaimInfo
import com.santechture.request.AuthorisationOutcome
import com.santechture.request.Header
import com.santechture.MasterPriceListItem
import com.santechture.MasterPriceList
import com.santechture.request.RequestOutcome
import com.santechture.request.PatientInsuranceOutcome
import com.santechture.Clinician
import com.santechture.request.ResubmissionOutcome
import com.santechture.request.Patient
import com.santechture.request.Resubmission
import com.santechture.request.Claim
import com.santechture.Regulator
import com.santechture.ObseleteDiagnosis
import com.santechture.request.HeaderOutcome
import com.santechture.CodeGroup
import com.santechture.FacilityType
import com.santechture.request.ExtendedValidationTypeOutcome
import com.santechture.request.CoPayment
import com.santechture.request.Deductible
import com.santechture.DHA_DRG
import com.santechture.DHA_DRG_HighCost
import com.santechture.DRGExcludedCpts
import com.santechture.DHA_DRG_COST_PER_ACTIVITY
import com.santechture.PackageCode
import com.santechture.CustomCode
import com.santechture.PackageItemCode
import com.santechture.RCMFacilityCodeMapping

function boolean isDentalConsultationCode(String sCode) {
if ((sCode.compareToIgnoreCase("01101") >= 0 && sCode.compareToIgnoreCase("01103") <= 0)
                || (sCode.compareToIgnoreCase("01202") >= 0 && sCode.compareToIgnoreCase("01205") <= 0)
                || sCode.compareToIgnoreCase("D0120") == 0
                || sCode.compareToIgnoreCase("D0140") == 0
                || sCode.compareToIgnoreCase("D0145") == 0
                || sCode.compareToIgnoreCase("D0150") == 0
                || sCode.compareToIgnoreCase("D0160") == 0
                || sCode.compareToIgnoreCase("D0170") == 0
                || sCode.compareToIgnoreCase("D0180") == 0) {
            return true;
        }
        return false;
}


function void logInfo(String ruleName, String info) {
	System.out.println(ruleName + info);
}


function Double roundDouble(java.lang.Double d) {
double value =  Math.round(d*100);
return value/100;
}

function  boolean hasDoubleValue(java.lang.Double d) {
if (d != null && d>0 && !d.isNaN()){
return true;
}
return false;

}

rule 'Legend'
dialect 'mvel'
when
//	#conditions
then
//#	#actions
//#	SPC_WITH_PACKAGE 		-10
//#	SPC_NO_PACKAGE 			-20
//#	CUS_WITH_PACKAGE 		-30
//#	CUS_NO_PACKAGE 			-40
//#	CUS_DENTAL_WITH_PACKAGE 	-50
//#	CUS_DENTAL_NO_PACKAGE 		-60
//#	SPC_CODE_FACTOR 		-70
//#	SPC_GROUP_FACTOR 		-80
//#	SPC_FACTOR 			-90
//#	SPC_ANESTHESIA_LIST_PRICE	-100
//#	SPC_LIST_PRICE			-105
//#	SPC_LIST_PRICE_MF2504		-106
//#	CUS_SET_MULTI_PROC		-107
//#	CUS_PROC_LIST_PRICE 		-108--DISABLED
//#	CUS_LIST_PRICE			-110
//#	CUS_DENTAL_LIST_PRICE		-120
//#	DRUG_LIST_PRICE			-130
//#	DENY_DISCOUNT			-180
//#	SPC_DISCOUNT_PHARMACY		-200
//#	CUS_DISCOUNT_PHARMACY		-210
//#	SPC_DISCOUNT_IP			-220
//#	CUS_DISCOUNT_IP			-230
//#	SPC_DISCOUNT_OP			-240
//#	CUS_DISCOUNT_OP			-250
//#	CALC_GROSS			-500
//#	ALERT_NO_LIST_PRICE		-501
//#	ALERT_NO_PREDEFINED_LIST_PRICE	-502
//#	FORCE_NO_PATIENT_SHARE		-510
//#	SET_CODE_GROUP			-550
//#	DENY_DEDUCTIBLE			-555
//#   	DEDUCTIBLE_OP_DAMAN_BASIC_LAB	-560
//#   	DEDUCTIBLE_OP_DAMAN_BASIC_RAD	-561
//#	DEDUCTIBLE_IN_PATIENT		-600
//#	DEDUCTIBLE_OUT_PATIENT		-610
//#	DEDUCTIBLE_DENTAL		-620
//#	DEDUCTIBLE_PHARMACY		-630
//#	DEDUCTIBLE_SERVICES_GENERAL_PRACTITIONER	-640
//#	DEDUCTIBLE_SERVICES_Specialist			-650
//#	DEDUCTIBLE_SERVICES_Consultant			-660
//#	DEDUCTIBLE_SERVICES_Consultation		-670
//#	DEDUCTIBLE_CPT_DAMAN_BASIC_GP_J170		-800
//#	DEDUCTIBLE_CPT_DAMAN_BASIC_SPECIALIST_J170	-850
//#	DEDUCTIBLE_CPT_OUT_PATIENT_PHYSIOTHERAPY_JBILL1292	-900
//#	DEDUCTIBLE_MATERNITY			-950
//#	DEDUCTIBLE_OPTICAL				-1000
//#	DEDUCTIBLE_CPT_X_RAY				-1050
//#	DEDUCTIBLE_CPT_MRI				-1100
//#	DEDUCTIBLE_CPT_RADIOLOGY				-1150
//#	DEDUCTIBLE_CPT_LABORATORY				-1200
//#	DEDUCTIBLE_CPT_CONSULTATION			-1250
//#	DEDUCTIBLE_CPT_GENERAL_PRACTITIONER		-1300
//#	DEDUCTIBLE_CPT_SPECIALIST				-1350
//#	DEDUCTIBLE_CPT_SPECIALIST				-1350
//#	DEDUCTIBLE_CPT_DIAGNOSTIC				-1400
//#	DEDUCTIBLE_CPT_OUT_PATIENT_EXCLUDING_DME_JBILL1292		-1450
//#	DEDUCTIBLE_CPT_OUTPATIENT_EXCLUDING_PHARMACY_JBILL1292 	-1500
//#	DEDUCTIBLE_OUTPATIENT_EXCLUDING_MATERNITY			-1505  -NEW
//#	DEDUCTIBLE_MATERNITY_EXCLUDING_MCONSULTATION	-1507  -NEW
//#	DEDUCTIBLE_MATERNITY_CONSULTATION_NOT_EM	-1509 -NEW
//#	DEDUCTIBLE_MATERNITY_CONSULTATION_EM		-1511 -NEW
//#	DEDUCTIBLE_CONSULTATION_EXCLUDING_MATERNITY_NOT_EM	-1513 -NEW
//#	DEDUCTIBLE_CONSULTATION_EXCLUDING_MATERNITY_EM		-1515 -NEW
//#	DEDUCTIBLE_DENTAL_CONSULTATION				-1517 -NEW
//#	DEDUCTIBLE_DENTAL_EXCLUDING_DCONSULTATION		-1519 -NEW
//#	DEDUCTIBLE_DENTAL_ORTHODONTIC_PROSTHESIS		-1521	-NEW
//#	DEDUCTIBLE_DENTAL_EXCLUDING_ORTHODONTIC_PROSTHESIS	-1523	-NEW
//#	DEDUCTIBLE_OUTPATIENT_EXCLUDING_PHRAMACY		-1525	-NEW --DELETED
//#	DEDUCTIBLE_OUTPATIENT_EXCLUDING_PHYSIOTHERAPY		-1527	-NEW
//#	DEDUCTIBLE_CONSULTAION_INCLUDING_DIAGNOSTIC_CPT		-1529	-NEW
//#	DEDUCTIBLE_CONSULTAION_INCLUDING_DIAGNOSTIC_SERVICE	-1531	-NEW
//#	DENY_COPAY					-2000
//#	COPAY_DENTAL					-2100
//#	COPAY_PHARMACY					-2150
//#	COPAY_SERVICES_GENERAL_PRACTITIONER		-2200
//#	COPAY_SERVICES_Specialist				-2250
//#	COPAY_SERVICES_Consultant				-2300
//#	COPAY_SERVICES_Consultation			-2350
//# 	COPAY_CPT_OUT_PATIENT_NOT_EM_JBILL1282		-2400
//#	COPAY_IN_PATIENT					-2450
//#	COPAY_OUT_PATIENT				-2500
//# 	COPAY_CPT_OUT_PATIENT_PHYSIOTHERAPY		-2550
//#	COPAY_MATERNITY					-2600
//# 	COPAY_OPTICAL					-2650
//#	COPAY_CPT_X_RAY					-2700
//#	COPAY_CPT_MRI					-2750
//#	COPAY_CPT_RADIOLOGY				-2800
//#	COPAY_CPT_LABORATORY				-2850
//#	COPAY_CPT_CONSULTATION				-2900
//#	COPAY_CPT_GENERAL_PRACTITIONER			-2950
//#	COPAY_CPT_SPECIALIST				-3000
//#	COPAY_CPT_DIAGNOSTIC				-3050
//#	COPAY_HCPCS_ENAYA				-3100
//#	COPAY_CPT_OUT_PATIENT_EXCLUDING_DME_JBILL1292	-3150
//#	COPAY_CPT_OUTPATIENT_EXCLUDING_PHARMACY_JBILL1292	-3200
//#	COPAY_OUTPATIENT_EXCLUDING_MATERNITY		-3205 -NEW
//#	COPAY_MATERNITY_EXCLUDING_MCONSULTATION		-3207  -NEW
//#	COPAY_MATERNITY_CONSULTATION_NOT_EM		-3209 -NEW
//#	COPAY_MATERNITY_CONSULTATION_EM			-3211 -NEW
//#	COPAY_CONSULTATION_EXCLUDING_MATERNITY_NOT_EM	-3213 -NEW
//#	COPAY_CONSULTATION_EXCLUDING_MATERNITY_EM	-3215 -NEW
//#	COPAY_DENTAL_CONSULTATION			-3217 -NEW
//#	COPAY_DENTAL_EXCLUDING_DCONSULTATION		-3219 -NEW
//#	COPAY_DENTAL_ORTHODONTIC_PROSTHESIS		-3221	-NEW
//#	COPAY_DENTAL_EXCLUDING_ORTHODONTIC_PROSTHESIS	-3223  -NEW
//#	COPAY_OUTPATIENT_EXCLUDING_PHRAMACY		-3225	-NEW --DELETED
//#	COPAY_OUTPATIENT_EXCLUDING_PHYSIOTHERAPY	-3227	-NEW
//#	COPAY_CONSULTAION_INCLUDING_DIAGNOSTIC_CPT	-3229	-NEW
//#	COPAY_CONSULTAION_INCLUDING_DIAGNOSTIC_SERVICE	-3231	-NEW
//# 	DENTAL_CONSULTATION_RESET_COPAY			-4000
//# 	DENTAL_CONSULTATION_RESET_DEDUCTIBLE		-4010
//#	CALC_ACTIVITY_NET		-5000
//#
//#	CALC_CLAIM_TOTALS		-10000
//#	report_Claim_Deductible		-20000
//#	report_Claim_CoPayment		-20000
end

rule 'ALERT_NO_LIST_PRICE'
dialect 'mvel'
salience -501
no-loop
when
	$c:Claim(gross== null)
	$act: Activity(gross == null,
		list == null || list.isNaN(), $outcome:outcome) /*from $c.activity*/
	not(ActivityOutcome(ruleName=="ALERT_NO_LIST_PRICE") from $act.outcome)
then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" List price not found to Activity ID=" + $act.getIdCaller()  +" code=" + $act.getCode());
	}
	//addSingleRuleOutcome
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"List price not found.", "");


end
rule 'COPAY_CPT_LABORATORY'
dialect 'mvel'
salience -2850
when
	$c:Claim()

	$coPayment:CoPayment(type in ("Laboratory", "Labarotary"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Pathology & Laboratory") from $groups ;
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end
rule 'COPAY_CPT_MRI'
dialect 'mvel'
salience -2750
when
	$c:Claim()



	$coPayment:CoPayment(type == "MRI", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $groups ;

then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_CONSULTATION'
dialect 'mvel'
salience -2900
when
	$c:Claim()

	$coPayment:CoPayment(type in ("Consultation", "Consultant"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*")
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
then

	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'CALC_GROSS'
dialect 'mvel'
salience -500
when
	$c:Claim(gross== null)
	$act: Activity(gross == null, list != null, !list.isNaN(),
		$list:list,  $discount:discount, $quantity:quantity )
then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		"Based on list price = " + $list + " to Activity ID=" + $act.getIdCaller()  +" code=" + 		$act.getCode());
	}
	double q= $quantity;
	if (  $quantity == null || $quantity.isNaN() || $quantity< 0 ){
        q= 1d;
	}
	double d =0d;
	if ($discount   != null ){
        d= $discount;
	}
Double NewGross=roundDouble(($list * q )-d);
	$act.setGross(NewGross);
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"based on list price " + $list +
		"", "");

/**************/
Double specialDiscount=($act.getSpecialDiscountPercentage()==null?0.0d :($act.getSpecialDiscountPercentage().isNaN() ? 0.0d :	roundDouble((NewGross/100)*$act.getSpecialDiscountPercentage())));
if((specialDiscount ==null || specialDiscount==0.0d)&&(($act.specialDiscountAmount !=null) && ($act.specialDiscountAmount >0.0d) )){

specialDiscount=$act.getSpecialDiscountAmount()

}
if (specialDiscount !=null && specialDiscount>0.0d){
	$act.setGross(roundDouble(NewGross-specialDiscount));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Apply special discount ["+specialDiscount +"] to gross. ", "");
	}

/*****************/

	update($act);

end

rule 'COPAY_CPT_GENERAL_PRACTITIONER'
dialect 'mvel'
salience -2950
when
	$c:Claim($providerID:providerID)

	$coPayment:CoPayment(type in ("General Practitioner", "GP"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup, $clinician:clinician)
    	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

	Clinician( facility_license==$providerID, license == $clinician,
			/*category.toLowerCase() not matches ".*consultant.*"  && */
			category.toLowerCase() matches '.*medical practitioner.*' ||
			category.toLowerCase() matches '.*general practitioner.*' ||
			category.replace(".","").toLowerCase() not matches ".*gp.*") ;
then

	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_DIAGNOSTIC'
dialect 'mvel'
salience -3050
when
	$c:Claim()

	Encounter(type<3 || type>6) from $c.encounter
	$coPayment:CoPayment(type == "Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup)
    	ActivityGroup( type==CodeType.CPT.getValue(), name=="DGTest_CPT_9_Series") from $groups ;
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'CALC_CLAIM_TOTALS'
dialect 'mvel'
salience -10000
when
	$c:Claim(patientShare ==null, net==null, gross == null)
	$totalGross: Number(doubleValue>0.0d) from accumulate(
	Activity(gross != null, gross >0.0d, !gross.isNaN(),$gross :gross ), sum($gross) )
	$totalDed: Number() from accumulate(
	Activity(deductible != null, deductible >0.0d, !deductible.isNaN(), 						$deductible :deductible), sum($deductible ) )
	$totalCoPay: Number() from accumulate(
		Activity(copayment != null, copayment >0.0d, !copayment.isNaN(), $copayment :copayment )
		, sum($copayment ) )
	$totalExPBP: Number() from accumulate(
		Activity(EX_PBP!= null, !EX_PBP.isNaN(), $EX_PBP:EX_PBP)
		, sum($EX_PBP ))
then
	double patientShare = roundDouble($totalDed+$totalCoPay+$totalExPBP);
	double net = roundDouble($totalGross-patientShare);

	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" totalDeductible =" + $totalDed +
		", totalCoPayment =" + $totalCoPay +
		", Extra PBP=" + $totalExPBP +
		", totalGross =" + $totalGross +
		", patientShare=" + patientShare +
		", Net=" + net);
	}
	$c.addOutcome(Severity.INFO, drools.getRule().getName(),
		" totalDeductible =" + $totalDed +
		", totalCoPayment =" + $totalCoPay +
		", Extra PBP=" + $totalExPBP +
		", totalGross =" + $totalGross +
		", patientShare=" + patientShare +
		", Net=" + net, "");

	$c.setGross($totalGross);
	$c.setPatientShare(patientShare);
	$c.setNet(net);
	update($c);

end

rule 'CALC_ACTIVITY_NET_REPORTING'
dialect 'mvel'
salience -4500
when
	$c:Claim(logInfo==true)
	$act:Activity()
then

    String lngMsg = "";
    if ($act.getGross() == null)
        lngMsg += " gross = null";
    else
        lngMsg += " gross = "+ $act.getGross();
    if ($act.getList() == null)
        lngMsg += " list = null";
    else
        lngMsg += " list = "+ $act.getList();
    if ($act.getPatientShare() == null)
        lngMsg += " patientShare = null";
    else
        lngMsg += " patientShare = "+ $act.getPatientShare();
    if ($act.getDeductible() == null)
        lngMsg += " deductible = null";
    else
        lngMsg += " deductible = "+ $act.getDeductible();
    if ($act.getCopayment() == null)
        lngMsg += " copayment = null";
    else
        lngMsg += " copayment = "+ $act.getCopayment();
    logInfo(drools.getRule().getName(),lngMsg);
end

rule 'CALC_ACTIVITY_NET'
dialect 'mvel'
salience -5000
when
	$c:Claim()
	$act:Activity(gross != null, gross >0.0d, !gross.isNaN(),
			net == null || net.isNaN(), patientShare == null || patientShare.isNaN(),
			$gross :gross,
			$copayment :copayment,
			$deductible :deductible,
			$EX_PBP :EX_PBP )

then

	double patientShare = 0d;
	 if ($deductible!=null){
         patientShare += $deductible;
	 }
	 if ($copayment!=null){
          patientShare += $copayment;
	 }
	 if($EX_PBP !=null){
         patientShare += $EX_PBP;
	 }
	 patientShare = roundDouble(patientShare);

	double net = roundDouble($gross-patientShare);
	if(net <0){
		net = 0;
	}
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Set patientShare="+patientShare + " net="+
		net+ " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"patientShare="+patientShare + " net="+ net, "");

	$act.setPatientShare(patientShare );
	$act.setNet(net);

	update($act);

end
//
//rule 'CALC_ACTIVITY_NET_anas'
//dialect 'mvel'
//salience -5000
//when
//	$c:Claim()
////	$act:Activity(gross != null, gross >0.0d, !gross.isNaN(),
//////			net == null || net.isNaN(), patientShare == null || patientShare.isNaN(),
////			$gross :gross,
////			$copayment :copayment,
////			$deductible :deductible,
////			$EX_PBP :EX_PBP )
//
//then
//System.out.println("Annnnnnnos");
//
//end

rule 'COPAY_CPT_X_RAY'
dialect 'mvel'
salience -2700
when
	$c:Claim()


	$coPayment:CoPayment(type.toUpperCase() == "X-RAY", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="X-RAY") from $groups ;
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
        double futureCopayTotal = $claimTotal+ value;
        double appliedCopay = 0.0d;
        if (futureCopayTotal > $ceiling){
            appliedCopay = $ceiling - $claimTotal;
                    appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
        }else{
            appliedCopay = value;
        }
        appliedCopay = roundDouble(appliedCopay);
            $act.setCopayment(appliedCopay);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set coPayment to " + appliedCopay + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $coPayment.setClaimTotal($claimTotal+appliedCopay);
        update($act);
        update($coPayment);
    }else{
        double appliedCopay = 0.0d;
        appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
        $act.setCopayment(appliedCopay);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set coPayment to " + appliedCopay + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'COPAY_DENTAL'
dialect 'mvel'
salience -2100
when
	$c:Claim()
	ClaimType (type==ClaimType.Dental) from $c.claimType

	$coPayment:CoPayment(type=="Dental", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity(gross != null, gross>0, !gross.isNaN(), copayment == null)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_HCPCS_ENAYA'
dialect 'mvel'
salience -3100
when
	$c:Claim()

	Contract(packageName.toLowerCase() matches ".*ENAYA.*") from $c.contract

	$act: Activity( type==CodeType.HCPCS, gross != null, gross>0, !gross.isNaN(), copayment == null)
then
	String sRuleName = drools.getRule().getName();
	if($c.getLogInfo()){logInfo(sRuleName, "");
	}

	$act.setCopayment(20.0d);
	$act.addOutcome(Severity.INFO, sRuleName ,
			" Set copaymentto 20.", "");
	update($act);

end

rule 'COPAY_IN_PATIENT'
dialect 'mvel'
salience -2450
when
	$c:Claim()
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter
	$coPayment:CoPayment(type == 'In Patient', value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act : Activity(gross != null, gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_OUT_PATIENT_PHYSIOTHERAPY'
dialect 'mvel'
salience -2550
when
	$c:Claim()

	Encounter(type<3 || type>6) from $c.encounter

	$coPayment:CoPayment(type == "Physiotherapy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment == null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Physical Medicine & Rehabilitation") from $groups;
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_SPECIALIST'
dialect 'mvel'
salience -3000
when
	$c:Claim($providerID:providerID)

	$coPayment:CoPayment(type =="Specialist", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup, $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*")
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
	Clinician( facility_license==$providerID, license == $clinician,
		/*category.toLowerCase() not matches ".*consultant.*"  && */
			category.toLowerCase() not matches '.*medical practitioner.*' &&
			category.toLowerCase() not matches '.*general practitioner.*' &&
			category.replace(".","").toLowerCase() not matches ".*gp.*");
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_RADIOLOGY'
dialect 'mvel'
salience -2800
when
	$c:Claim()



	$coPayment:CoPayment(type == "Radiology", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup)
	    ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $groups ;
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_OUT_PATIENT_NOT_EM_JBILL1282'
dialect 'mvel'
salience -2400
when
	$c:Claim()
	Encounter($encType:type, type<3 || type>6) from $c.encounter


	$coPayment:CoPayment(type == "Outpatient excluding Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity(/*type==CodeType.CPT,*/ code != null,
		code.trim.length>0,
		/*code not in ("9", "10", "11"), */
		eval(  !( (code.compareToIgnoreCase("99201")>=0 && code.compareToIgnoreCase("99205")<=0) ||
			(code.compareToIgnoreCase("99212")>=0 && code.compareToIgnoreCase("99215")<=0) ||
			(code.compareToIgnoreCase("99281")>=0 && code.compareToIgnoreCase("99285")<=0) ||
			(code.compareToIgnoreCase("92002")>=0 && code.compareToIgnoreCase("92014")<=0))
		),
	gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)

    not(ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_OUT_PATIENT_EXCLUDING_DME_JBILL1292'
dialect 'mvel'
salience -3150
when
	$c:Claim()

	Encounter(type in (1, 2)) from $c.encounter
	$coPayment:CoPayment(type == "Outpatient excluding DME", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity( gross != null, gross>0, !gross.isNaN(), copayment== null)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CPT_OUTPATIENT_EXCLUDING_PHARMACY_JBILL1292'
dialect 'mvel'
salience -3200
when
	$c:Claim()

	Encounter(type in (1,2)) from $c.encounter
	$coPayment:CoPayment(type == "Outpatient excluding Pharmacy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity( type!=CodeType.TRADE_DRUG, gross != null, gross>0, !gross.isNaN(), copayment== 			null, $groups:activityGroup)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_SERVICES_Consultation'
dialect 'mvel'
salience -2350
when
	$c:Claim()

	$coPayment:CoPayment(type == "Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity(type==CodeType.SERVICE, gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)
	ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_SERVICES_Specialist'
dialect 'mvel'
salience -2250
when
	$c:Claim()


	$coPayment:CoPayment(type =="Specialist",value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity(type==CodeType.SERVICE, code=="10", gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_SERVICES_GENERAL_PRACTITIONER'
dialect 'mvel'
salience -2200
when
	$c:Claim()



	$coPayment:CoPayment(type in ("General Practitioner", "Medical Practitioner"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity(type==CodeType.SERVICE, code=="9", 	gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_OUT_PATIENT'
dialect 'mvel'
salience -2500
when
	$c:Claim()
	Encounter($encType:type, type<3 || type>6) from $c.encounter
	$coPayment:CoPayment(type == "Out Patient", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act : Activity(gross != null, gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_PHARMACY'
dialect 'mvel'
salience -2150
when
	$c:Claim()



	$coPayment:CoPayment(type=="Pharmacy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)
	$act: Activity(type==CodeType.TRADE_DRUG, gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_SERVICES_Consultant'
dialect 'mvel'
salience -2300
when
	$c:Claim()

	$coPayment:CoPayment(type =="Consultant", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity(type==CodeType.SERVICE, code=="11", gross != null,
	gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}
else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_OPTICAL'
dialect 'mvel'
salience -2650
when
	$c:Claim()
	ClaimType (type==ClaimType.Optical) from $c.claimType

	$coPayment:CoPayment(type == "Optical", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act:Activity(type==CodeType.CPT || type==CodeType.HCPCS, gross != null, gross>0, !gross.isNaN(), 	copayment == null)
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_MATERNITY'
dialect 'mvel'
salience -2600
when
	$c:Claim()
	ClaimType (type==ClaimType.Maternity) from $c.claimType


	$coPayment:CoPayment(type == "Maternity", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

$act: Activity(gross != null, gross>0, !gross.isNaN(), copayment == null)

then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGross(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGross(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'CUS_SET_MULTI_PROC'
dialect 'mvel'
salience -107
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null, multipleProcedures==null,
		primaryProc==null,secondaryProc==null, thirdProc==null, forthProc==null)
	Encounter($encStart:start) from $c.encounter
	CusContract(ID.intValue() ==$CUS_ID.intValue(), multipleProcedure==1,
	(primaryProcedure != null && primaryProcedure>0) ||
	(secondaryProcedure!= null && secondaryProcedure>0) ||
	(thirdProcedure != null && thirdProcedure>0) ||
	(forthProcedure != null && forthProcedure>0),
	$primaryProcedure:primaryProcedure,
	$secondaryProcedure:secondaryProcedure,
	$thirdProcedure:thirdProcedure,
	$forthProcedure:forthProcedure)

then
if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" enable multiple procedures in claim");}
$c.setMultipleProcedures(1);
$c.setPrimaryProc($primaryProcedure!= null && $primaryProcedure>0?$primaryProcedure:null);
$c.setSecondaryProc($secondaryProcedure!= null && $secondaryProcedure>0?$secondaryProcedure:null);
$c.setThirdProc($thirdProcedure!= null && $thirdProcedure>0?$thirdProcedure:null);
$c.setForthProc($forthProcedure!= null && $forthProcedure>0?$forthProcedure:null);

$c.addOutcome(Severity.INFO, drools.getRule().getName(),
		"enable multiple procedures in claim", "");
update($c);

end

rule 'DEDUCTIBLE_CPT_CONSULTATION'
dialect 'mvel'
salience -1250
when
	$c:Claim()

	$deductible:Deductible(type in ("Consultation", "Consultant"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*")

	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
then
	String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_CPT_DAMAN_BASIC_GP_J170'
dialect 'mvel'
salience -800
when
	$c:Claim($providerID:providerID)
	Contract(packageName.toLowerCase() matches ".*daman basic.*") from $c.contract
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == 			null, $groups:activityGroup, $clinician:clinician)
	ActivityGroup(type==CodeType.CPT.getValue(), name=="Evaluation And Management") from 			$groups;
	Clinician( facility_license==$providerID, license == $clinician,
			profession.toLowerCase() matches ".*medical practitioner.*" ||
			profession.toLowerCase() matches ".*general practitioner.*" ) ;
then
	String sRuleName = drools.getRule().getName();
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to 20 For Activity="+$act.getIdCaller()+
		" code="+$act.getCode());
	}

	$act.setDeductible(20.0d);
	$act.addOutcome(Severity.INFO, sRuleName ,
		" Set deductible to 20.", "");
	update($act);

end

rule 'CUS_DISCOUNT_OP'
dialect 'mvel'
salience -250
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null)
	Encounter($encType:type, type<3 || type>6) from $c.encounter
	CusContract(ID.intValue() ==$CUS_ID.intValue(), $OP_DISCOUNT:OP_DISCOUNT)
	$act:Activity(type != CodeType.TRADE_DRUG, type != CodeType.HCPCS, type != CodeType.DENTAL, $code:code, list != null, !list.isNaN(),
	discount == null, $list:list, $quantity: quantity)
//from $c.activity

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(), " Apply discount="+$OP_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage($OP_DISCOUNT==null || $OP_DISCOUNT<0 ? Double.NaN : $OP_DISCOUNT);

	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $OP_DISCOUNT+
		"", "");
	update($act);

end

rule 'DEDUCTIBLE_CPT_DIAGNOSTIC'
dialect 'mvel'
salience -1400
when
	$c:Claim()

	Encounter(type<3 || type>6) from $c.encounter
	$deductible:Deductible(type == "Diagnostic",  value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="DGTest_CPT_9_Series") from $groups ;
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_CPT_RADIOLOGY'
dialect 'mvel'
salience -1150
when
	$c:Claim()

	$deductible:Deductible(type == "Radiology", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $groups ;
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_CPT_SPECIALIST'
dialect 'mvel'
salience -1350
when
	$c:Claim($providerID:providerID)

	$deductible:Deductible(type in ("Specialist"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup, $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*")
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

	Clinician( facility_license==$providerID, license == $clinician,
			category.toLowerCase() not matches ".*consultant.*"  &&
			category.toLowerCase() not matches '.*medical practitioner.*' &&
			category.toLowerCase() not matches '.*general practitioner.*' &&
			category.replace(".","").toLowerCase() not matches ".*gp.*") ;
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_CPT_OUT_PATIENT_PHYSIOTHERAPY_JBILL1292'
dialect 'mvel'
salience -900
when
	$c:Claim(patient != null)

	Encounter(type<3 || type>6) from $c.encounter
	$deductible:Deductible(type == "Physiotherapy",value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)

	ActivityGroup( type==CodeType.CPT.getValue(), name=="Physical Medicine & Rehabilitation")
	from $groups;
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_CPT_OUTPATIENT_EXCLUDING_PHARMACY_JBILL1292'
dialect 'mvel'
salience -1500
when
	$c:Claim()

	Encounter(type in (1,2)) from $c.encounter
	$deductible:Deductible(type == "Outpatient excluding Pharmacy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type!=CodeType.TRADE_DRUG, gross != null, gross>0, !gross.isNaN(), deductible 		== null, $groups:activityGroup)
then
		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_CPT_MRI'
dialect 'mvel'
salience -1100
when
	$c:Claim()

	$deductible:Deductible(type == "MRI", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)
    	ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $groups ;
then
		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_CPT_OUT_PATIENT_EXCLUDING_DME_JBILL1292'
dialect 'mvel'
salience -1450
when
	$c:Claim()

	Encounter(type in (1, 2)) from $c.encounter
	$deductible:Deductible(type == "Outpatient excluding DME", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( gross != null, gross>0, !gross.isNaN(), deductible == null)
then
		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_CPT_LABORATORY'
dialect 'mvel'
salience -1200
when
	$c:Claim()

	$deductible:Deductible(type in ("Laboratory", "Labarotary"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Pathology & Laboratory") from $groups ;
then
		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_CPT_DAMAN_BASIC_SPECIALIST_J170'
dialect 'mvel'
salience -850
when
	$c:Claim($providerID:providerID)
	Contract(packageName.toLowerCase() matches ".*daman basic.*") from $c.contract
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup, $clinician:clinician)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
	Clinician( facility_license==$providerID, license == $clinician,
			//profession.toLowerCase() matches ".*specialist.*"
			profession.toLowerCase() not matches ".*medical practitioner.*",
			profession.toLowerCase() not matches ".*general practitioner.*" ) ;
then
	String sRuleName = drools.getRule().getName();
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to 10 For Activity="+$act.getIdCaller()+
		" code="+$act.getCode());
	}

	$act.setDeductible(10.0d);
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Set deductible to 10.", "");
	update($act);


end

rule 'CUS_DISCOUNT_PHARMACY'
dialect 'mvel'
salience -210
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null)
	CusContract(ID.intValue() ==$CUS_ID.intValue(), $PHARM_DISCOUNT:PHARM_DISCOUNT)
	$act:Activity(type == CodeType.TRADE_DRUG, $code:code, list != null, !list.isNaN(), discount == null, 	$list:list, $quantity: quantity)
//from $c.activity

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply discount="+$PHARM_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.setDiscountPercentage($PHARM_DISCOUNT==null || $PHARM_DISCOUNT<0 ?
	Double.NaN : $PHARM_DISCOUNT);
	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));


	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $PHARM_DISCOUNT+
		"", "");
	update($act);

end

rule 'DEDUCTIBLE_CPT_GENERAL_PRACTITIONER'
dialect 'mvel'
salience -1300
when
	$c:Claim($providerID:providerID)

	$deductible:Deductible(type in ("General Practitioner", "GP"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup, $clinician:clinician)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
	Clinician( facility_license==$providerID, license == $clinician,
			category.toLowerCase() not matches ".*consultant.*"  && (
			category.toLowerCase() matches '.*medical practitioner.*' ||
			category.toLowerCase() matches '.*general practitioner.*' ||
			category.replace(".","").toLowerCase() matches ".*gp.*")) ;
then

		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'CUS_DISCOUNT_IP'
dialect 'mvel'
salience -230
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null)
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter
	CusContract(ID.intValue() ==$CUS_ID.intValue(), $IP_DISCOUNT:IP_DISCOUNT)
	$act:Activity(type != CodeType.TRADE_DRUG, $code:code, type != CodeType.HCPCS, list != null, !list.isNaN(), discount == null, $quantity: quantity, $list:list)
//from $c.activity

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply discount="+$IP_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.setDiscountPercentage($IP_DISCOUNT==null || $IP_DISCOUNT<0 ? Double.NaN : $IP_DISCOUNT);
	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $IP_DISCOUNT+
		"", "");
	update($act);

end

rule 'DEDUCTIBLE_OP_DAMAN_BASIC_RAD'
dialect 'mvel'
salience -561
when
//JIRA PRICE-195
	$c:Claim(patient != null, providerID !="MF1992", $patient:patient)
	Encounter($encType:type, type<3 || type>6) from $c.encounter
	Contract(packageName.toLowerCase() matches ".*daman basic.*") from $c.contract
	$act:Activity(type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null,
	$gross:gross, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $groups ;
	$RADtotalDed: Number() from accumulate (
	    $act_act: Activity( type==CodeType.CPT, deductible != null, $act_groups:activityGroup, 			$deductible:deductible)
    	and
	    ActivityGroup( type==CodeType.CPT.getValue(), name=="Radiology") from $act_groups ;
	    sum($deductible)
	)


then
	String sRuleName = drools.getRule().getName();
	double appliedDeductible = 10d-$RADtotalDed;
	if(appliedDeductible>=$gross){
		appliedDeductible = $gross;
	}
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + " totalDeductibles for LABS "+$RADtotalDed+".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible
		+ " totalDeductibles for LABS "+$RADtotalDed+"." +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
    update($act);

end

rule 'DEDUCTIBLE_PHARMACY'
dialect 'mvel'
salience -630
when
	$c:Claim(patient != null)

	$deductible:Deductible(type=="Pharmacy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)


	$act : Activity(type==CodeType.TRADE_DRUG, gross != null,
	gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
		String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_OUT_PATIENT'
dialect 'mvel'
salience -610
when
	$c:Claim(patient != null, $patient:patient)
	Encounter($encType:type, type<3 || type>6) from $c.encounter

	$deductible:Deductible(type=="Out Patient", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act:Activity(gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_SERVICES_Consultant'
dialect 'mvel'
salience -660
when
	$c:Claim(patient != null)

	$deductible:Deductible(type =="Consultant", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act : Activity(type==CodeType.SERVICE, code=="11",
	gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }

end

rule 'DEDUCTIBLE_OP_DAMAN_BASIC_LAB'
dialect 'mvel'
salience -560
when
//JIRA PRICE-195
	$c:Claim(patient != null, providerID !="MF1992", $patient:patient)
	Encounter($encType:type, type<3 || type>6) from $c.encounter
	Contract(packageName.toLowerCase() matches ".*daman basic.*") from $c.contract
	$act:Activity(type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null,
	$gross:gross, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Pathology & Laboratory") from $groups;
	$LABtotalDed: Number() from accumulate (
	    $act_act: Activity( type==CodeType.CPT, deductible != null, $act_groups:activityGroup, 			$deductible:deductible)
    	and
	    ActivityGroup( type==CodeType.CPT.getValue(), name=="Pathology & Laboratory") from 			$act_groups;
	    sum($deductible)
	)


then
	String sRuleName = drools.getRule().getName();
	double appliedDeductible = 10.0d-$LABtotalDed;
	if(appliedDeductible>=$gross){
		appliedDeductible = $gross;
	}
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName,
        	" Set deductible to " + appliedDeductible + " totalDeductibles for LABS "+$LABtotalDed+".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible
		+ " totalDeductibles for LABS "+$LABtotalDed+"." +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);

end

rule 'DEDUCTIBLE_OPTICAL'
dialect 'mvel'
salience -1000
when
	$c:Claim()
	ClaimType (type==ClaimType.Optical) from $c.claimType

	$deductible:Deductible(type == "Optical", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
    $act: Activity(type==CodeType.CPT || type==CodeType.HCPCS, gross != null, gross>0, !gross.isNaN(), 	deductible == null)
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
        double futureDeductibleTotal = $claimTotal+ $value;
        double appliedDeductible = 0.0d;
        if (futureDeductibleTotal > $ceiling){
            appliedDeductible = $ceiling - $claimTotal;
                    appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
        }else{
            appliedDeductible = $value;
        }
        appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");
        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        $deductible.setClaimTotal($claimTotal+appliedDeductible);
        update($act);
        update($deductible);
    }else{
        double appliedDeductible = 0.0d;
        appliedDeductible = roundDouble($value);
        $act.setDeductible(appliedDeductible);
        $act.addOutcome(Severity.INFO, sRuleName ,
                " Set deductible to " + appliedDeductible + ".", "");

        if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
            " For Activity="+$act.getIdCaller()+" code="+$act.getCode());
        }
        update($act);
    }
end

rule 'DEDUCTIBLE_MATERNITY'
dialect 'mvel'
salience -950
when
	$c:Claim(patient != null, activity !=null && !activity.isEmpty())
	ClaimType (type==ClaimType.Maternity) from $c.claimType

	$deductible:Deductible(type == "Maternity", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
$act: Activity(gross != null, gross>0, !gross.isNaN(), deductible == null)

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_IN_PATIENT'
dialect 'mvel'
salience -600
when
$c:Claim()
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter

	$deductible:Deductible(type=="In Patient", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act:Activity(hasDoubleValue(gross),$gross:gross, deductible == null )
// Calculate maximum gross value
    $maxGross: Double() from accumulate(
       $a:Activity(hasDoubleValue(gross),deductible == null ),
        max($a.gross )
    )
    //Count  of  applied Deductible from  the  same  type
       accumulate(Activity(  hasDoubleValue( deductible ),deductible==$value ,$code:code) ,$countOfActs:count($code))
    // Ensure we only fire if this activity group hasn't been processed yet
    eval($countOfActs<1 && $maxGross == $gross )
then
	String sRuleName = drools.getRule().getName();
    if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
    	double futureDeductibleTotal = $claimTotal+ $value;
    	double appliedDeductible = 0.0d;
    	if (futureDeductibleTotal > $ceiling){
    		appliedDeductible = $ceiling - $claimTotal;
                	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
    	}else{
    		appliedDeductible = $value;
    	}
    	appliedDeductible = roundDouble(appliedDeductible);
            $act.setDeductible(appliedDeductible);
    	$act.addOutcome(Severity.INFO, sRuleName ,
            	" Set deductible to " + appliedDeductible + ".", "");
    	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
    		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
    	}
    	$deductible.setClaimTotal($claimTotal+appliedDeductible);
    	update($act);
    	update($deductible);
    }else{
    	double appliedDeductible = 0.0d;
    	appliedDeductible = roundDouble($value);
    	$act.setDeductible(appliedDeductible);
    	$act.addOutcome(Severity.INFO, sRuleName ,
            	" Set deductible to " + appliedDeductible + ".", "");

    	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
    		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
    	}
    	update($act);
    }
end

rule 'DEDUCTIBLE_DENTAL'
dialect 'mvel'
salience -620
when
	$c:Claim(patient != null, activity !=null && !activity.isEmpty(), $patient:patient)
	ClaimType (type==ClaimType.Dental) from $c.claimType
	Patient(patientInsurance != null, $patientInsurance:patientInsurance) from $patient

	$deductible:Deductible(type=="Dental", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act:Activity(gross != null, gross>0, !gross.isNaN(), deductible == null)
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_CPT_X_RAY'
dialect 'mvel'
salience -1050
when
	$c:Claim()

	$deductible:Deductible(type.toUpperCase() == "X-RAY", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="X-RAY") from $groups ;
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'FORCE_NO_PATIENT_SHARE'
dialect 'mvel'
salience -510
when
	$c:Claim(providerID=="DHA-F-0046260-C", receiverID=="INS026", $providerID:providerID)
	Contract(packageName=="Network 5") from $c.contract
	$act: Activity(deductible == null || copayment== null)
then
	String sRuleName = drools.getRule().getName();
	String sMsg = "NEURO SPINAL HOSPITAL - CORPORATE ACCOUNT+ DAMAN Set copay and deductible to 0";
	if($c.getLogInfo()){logInfo(sRuleName,
	sMsg+
	" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDeductible(0d);
	$act.setCopayment(0d);
	$act.addOutcome(Severity.INFO, sRuleName ,
		sMsg, "");
	update($act);

end

rule 'SPC_ANESTHESIA_LIST_PRICE'
dialect 'mvel'
salience -100
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
	Encounter($encStart:start) from $c.encounter
	$spcMasterPriceList: MasterPriceList($masterListId:id, startDate == null || $encStart>= 		startDate, endDate == null || $encStart<= endDate)
	$act:Activity($code:code, $type:type, $SPCFactor:SPCFactor, list== null)
	//$codeGroup: CodeGroup($codeGroupID:id, name=="Anaesthesia", eval(containsCode($code)==true))

	exists(ActivityGroup(name=="Anaesthesia") from $act.activityGroup)
        MasterPriceListItem(masterListId==$masterListId, type==$type, code==$code, $price:price,
	anaesthesiaBaseUnits != null, $anaesthesiaBaseUnits:anaesthesiaBaseUnits)

then
	String sRuleName = drools.getRule().getName();

	double listPrice = roundDouble($price*$SPCFactor);
	double oldListPrice = listPrice;
	double newListPrice = listPrice * $anaesthesiaBaseUnits ;
    if ($act.getTimeUnits() != null){
        newListPrice = listPrice * ($anaesthesiaBaseUnits + $act.getTimeUnits());
    }
	$act.setList(newListPrice);
	$act.setAnaesthesiaBaseUnits($anaesthesiaBaseUnits);
	$act.addOutcome(Severity.INFO, sRuleName ,
		" Set list price to "+newListPrice+" was "+oldListPrice +".", "");
	if($c.getLogInfo()){logInfo(sRuleName,
		" Set list price to "+newListPrice+" was "+ oldListPrice+".");
	}


	update($act);

end

rule 'SET_CODE_GROUP'
dialect 'mvel'
/*salience -550*/
when
	$c:Claim($SPC_ID:SPC_ID)
	$act: Activity(type != CodeType.TRADE_DRUG,
	$gross:gross,
		deductible == null, copayment == null, $actType:type, $code: code)
	/*eval($SPC_ID != null || ($gross != null && !$gross.isNaN() && $gross>0))*/
	$codeGroup: CodeGroup($codeGroupID:id,
		($actType == CodeType.CPT 		&& type == CodeType.CPT	) ||
		($actType == CodeType.DENTAL		&& type == CodeType.DENTAL	) ||
		($actType == CodeType.HCPCS 		&& type == CodeType.HCPCS) ||
		($actType == CodeType.SERVICE  	&& type == CodeType.SERVICE) ||
		($actType == CodeType.TRADE_DRUG  	&& type == CodeType.TRADE_DRUG	)
		,
		/*name in ("Anaesthesia",
			"Evaluation And Management",
			"Physical Medicine & Rehabilitation",
			"Radiology",
			"Pathology & Laboratory",
			"DGTest_CPT_9_Series",
			"Maternity Care & Delivery",
			"Ophthalmology"), */
		$code==code)

	not(ActivityGroup(id.equals($codeGroupID)) from $act.activityGroup)

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Detect group="+$codeGroup.getName()+".");	}
if($act.addActivityGroup($codeGroup.getId(), $codeGroup.getType().getValue(), $codeGroup.getName())){
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Set group="+$codeGroup.getName()+" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),$codeGroup.getName(), "");
	update($act);
}

end

rule 'DEDUCTIBLE_SERVICES_Specialist'
dialect 'mvel'
salience -650
when
	$c:Claim(patient != null)

	$deductible:Deductible(type =="Specialist", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act: Activity(type==CodeType.SERVICE, code=="10",
	gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DENTAL_CONSULTATION_RESET_COPAY'
dialect 'mvel'
salience -4000
when
	$c: Claim()
	$act: Activity(copayment!= null, !copayment.isNaN(), deductible>0.0d, copayment >0.0d,
		eval(isDentalConsultationCode(code))
	)
then
	String sRuleName = drools.getRule().getName();

	if($c.getLogInfo()){logInfo(sRuleName,
		 " Set coPayment to 0 For Activity=" + $act.getIdCaller()
                + " code=" + $act.getCode());
	}
	$act.setCopayment(0.0d);

	$act.addOutcome(Severity.INFO, sRuleName ,
        	"Set coPayment to 0.", "");
	update($act);

end

rule 'DENTAL_CONSULTATION_RESET_DEDUCTIBLE'
dialect 'mvel'
salience -4010
when
	$c: Claim()
	$act: Activity(type==CodeType.DENTAL, deductible != null, !deductible.isNaN(), deductible>0.0d,
		eval(!isDentalConsultationCode(code))
	)
then
	String sRuleName = drools.getRule().getName();

	if($c.getLogInfo()){logInfo(sRuleName,
		" Set Deductible to 0.");
	}

	$act.setDeductible(0.0d);

	$act.addOutcome(Severity.INFO, sRuleName ,
        	"Set Deductible to 0.", "");
	update($act);

end
rule 'DEDUCTIBLE_SERVICES_GENERAL_PRACTITIONER'
dialect 'mvel'
salience -640
when
	$c:Claim(patient != null)

	$deductible:Deductible(type in ("General Practitioner", "Medical Practitioner"), value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity(type==CodeType.SERVICE, code=="9",
	gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end
rule 'DEDUCTIBLE_SERVICES_Consultation'
dialect 'mvel'
salience -670
when
	$c:Claim(patient != null)

	$deductible:Deductible(type == "Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$act : Activity(type==CodeType.SERVICE,
	gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup
then
		String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'report_Claim_Deductible'
dialect 'mvel'
salience -20000
when
	$c:Claim()
	$totalDed: Number() from accumulate(
		Activity(deductible != null, deductible >0.0d, !deductible.isNaN(), $deductible :deductible)
		, sum($deductible ) )
then
	$c.addOutcome(Severity.INFO, drools.getRule().getName(), " totalDeductible ="+$totalDed, "");

end

rule 'report_Claim_CoPayment'
dialect 'mvel'
salience -20000
when
	$c:Claim()
	$totalCoPay: Number() from accumulate(
		Activity(copayment != null, copayment >0.0d, !copayment.isNaN(), $copayment :copayment )
		, sum($copayment ) )
then
	$c.addOutcome(Severity.INFO, drools.getRule().getName(), " totalCoPayment ="+$totalCoPay, "");

end

rule 'SPC_DISCOUNT_PHARMACY'
dialect 'mvel'
salience -200
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
	SPCContract(ID.intValue() ==$SPC_ID.intValue(), $PHARM_DISCOUNT:PHARM_DISCOUNT)
	$act:Activity(type == CodeType.TRADE_DRUG, $code:code, list != null, !list.isNaN(), discount == null, 	$list:list, $quantity: quantity)
//from $c.activity

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply discount="+$PHARM_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage($PHARM_DISCOUNT==null || $PHARM_DISCOUNT<0 ?
	Double.NaN : $PHARM_DISCOUNT);
	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $PHARM_DISCOUNT+"", "");
	update($act);

end

rule 'SPC_FACTOR'
dialect 'mvel'
salience -90
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null, CUS_ID== null)
	Encounter($start:start) from $c.encounter
	$spcContract:SPCContract(ID.intValue()==$SPC_ID.intValue())
	$act:Activity(type != CodeType.TRADE_DRUG,type != CodeType.IR_DRG,  $type:type, $code:code, SPCFactor == null)
then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply contract factor="+$spcContract.getFactor()+
		" to Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setSPCFactor($spcContract.getFactor());
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),"Apply Factor="+
		$spcContract.getFactor()+ "", "");
	update($act);

end

rule 'SPC_DISCOUNT_IP'
dialect 'mvel'
salience -220
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter
	SPCContract(ID.intValue() ==$SPC_ID.intValue(), $IP_DISCOUNT:IP_DISCOUNT)
	$act:Activity(type != CodeType.TRADE_DRUG, type != CodeType.HCPCS, $code:code, list != null, !list.isNaN(), discount == null, 	$list:list, $quantity: quantity)
//from $c.activity

then

	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply discount="+$IP_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}


	$act.setDiscountPercentage($IP_DISCOUNT==null || $IP_DISCOUNT<0 ? Double.NaN : $IP_DISCOUNT);
	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $IP_DISCOUNT+
		"", "");
	update($act);

end

rule 'SPC_DISCOUNT_OP'
dialect 'mvel'
salience -240
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
	Encounter(type<3 || type>6) from $c.encounter
	SPCContract(ID.intValue()==$SPC_ID.intValue(), $OP_DISCOUNT:OP_DISCOUNT)
	$act:Activity(type != CodeType.TRADE_DRUG,  type != CodeType.HCPCS, list != null, !list.isNaN(), discount == null, $list:list, 		$quantity: quantity)
// from $c.activity

then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply discount="+$OP_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());	}


	$act.setDiscountPercentage($OP_DISCOUNT==null || $OP_DISCOUNT < 0 ? Double.NaN : $OP_DISCOUNT);
	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $OP_DISCOUNT+"", "");
	update($act);

end

rule 'CUS_DENTAL_LIST_PRICE'
dialect 'mvel'
salience -120
when
$c:Claim($CUS_DENTAL_ID:CUS_DENTAL_ID, CUS_DENTAL_ID != null)
Encounter($encStart:start) from $c.encounter
CusContract(ID.intValue() ==$CUS_DENTAL_ID.intValue(), $priceListId:priceListId)

$act:Activity(type == CodeType.DENTAL, $code:code, $type:type, list== null, $quantity:quantity)

CusPriceListItem(pricListId==$priceListId,code==$code, type==$type,
startDate == null || $encStart>= startDate,
endDate == null || $encStart<= endDate, $price:price, $discount:discount)

then
if($c.getLogInfo()){logInfo(drools.getRule().getName(), " Set list price, price list id="+$priceListId
		+ " price=" + $price + " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}
$act.setList($price==null || $price<0 ? Double.NaN : roundDouble($price));
if($discount != null && $discount>0){
$act.setDiscountPercentage($discount);
if($act.getList() != null && !$act.getList().isNaN()){
$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
roundDouble(((($act.getList()/100)*$act.getDiscountPercentage())*
($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
}
}
$act.addOutcome(Severity.INFO, drools.getRule().getName(),
"Set list price, price list id="+$priceListId+ " price="+$price+
"", "");
update($act);
end

rule 'CUS_DENTAL_NO_PACKAGE'
dialect 'mvel'
salience -60
when
    $c:Claim($providerID:providerID, $receiverID:receiverID, CUS_DENTAL_ID== null)
Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract
//Facility(license == $providerID, regulator==Regulator.DHA)
Encounter($start:start) from $c.encounter
exists(Activity(type==CodeType.DENTAL) /*from $c.activity*/)
not(CusContract(insurerLicense==$receiverID,
facilityLicense == $providerID, packageName == $packageName,
startDate == null || $start>= startDate, isDental()==true,
endDate == null || $start<= endDate))
$cusContract: CusContract(insurerLicense==$receiverID,
facilityLicense == $providerID, packageName == null, isDental()==true,
startDate == null || $start>= startDate,
endDate == null || $start<= endDate)
then
if($c.getLogInfo()){logInfo(drools.getRule().getName(),
"Apply dental custom contract ID="+$cusContract.getID()+" Encounter start="+$start);
}
$c.setCUS_DENTAL_ID($cusContract.getID());
$c.addOutcome(Severity.INFO, drools.getRule().getName(),"Apply dental custom contract ID="+$cusContract.getID()+"Accountant-45 Encounter start="+$start, "");

	update($c);
end

rule 'CUS_WITH_PACKAGE'
dialect 'mvel'
salience -30

when
	$c:Claim($providerID:providerID, $receiverID:receiverID, SPC_ID == null, CUS_ID== null)

	Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract



	//Facility(license == $providerID, regulator==Regulator.DHA)

	Encounter($start:start) from $c.encounter

	$cusContract:CusContract(insurerLicense==$receiverID,
        facilityLicense == $providerID, packageName == $packageName,
	isDental()==false,
        startDate == null || $start>= startDate,
        endDate == null || $start<= endDate)


then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply Custom contract ID="+$cusContract.getID()+" Encounter start="+$start);
	}


	$c.setCUS_ID($cusContract.getID());
	$c.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Apply Custom contract ID="+$cusContract.getID()+" Encounter start="+$start, "");
	update($c);
end

rule 'CUS_NO_PACKAGE'
dialect 'mvel'
salience -40

when
	$c:Claim($providerID:providerID, $receiverID:receiverID, SPC_ID == null, CUS_ID== null)

	Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract

	//Facility(license == $providerID, regulator==Regulator.DHA)

	Encounter($start:start) from $c.encounter

	not(CusContract(insurerLicense==$receiverID,
        facilityLicense == $providerID, packageName == $packageName,
	isDental()==false,
        startDate == null || $start>= startDate,
        endDate == null || $start<= endDate))

        $cusContract: CusContract(insurerLicense==$receiverID,
        facilityLicense == $providerID, packageName == null, isDental()==false,
        startDate == null || $start>= startDate,
        endDate == null || $start<= endDate)

then

	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Apply Custom contract ID="+$cusContract.getID()+" Encounter start="+$start);
	}


	$c.setCUS_ID($cusContract.getID());

	$c.addOutcome(Severity.INFO, drools.getRule().getName(),"Apply Custom contract ID="+$cusContract.getID()+" Encounter start="+$start, "");

	update($c);
end

rule 'CUS_DENTAL_WITH_PACKAGE'
dialect 'mvel'
salience -50

when
	$c:Claim($providerID:providerID, $receiverID:receiverID,
	CUS_DENTAL_ID== null)

	Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract

	//Facility(license == $providerID, regulator==Regulator.DHA)

	exists(Activity(type==CodeType.DENTAL) /*from $c.activity*/)

	Encounter($start:start) from $c.encounter

	$cusContract:CusContract(insurerLicense==$receiverID,
        facilityLicense == $providerID, packageName == $packageName,
	isDental()==true,
        startDate == null || $start>= startDate,
        endDate == null || $start<= endDate)


then

	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		"Apply Dental Custom contract ID="+$cusContract.getID()+" Encounter start="+$start);
	}

	$c.setCUS_DENTAL_ID($cusContract.getID());

	$c.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Apply Dental Custom contract ID="+$cusContract.getID()+" Encounter start="+$start, "");

	update($c);
end

rule 'CUS_LIST_PRICE'
dialect 'mvel'
salience -110

when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null)
	Encounter($encStart:start) from $c.encounter


	CusContract(ID.intValue() ==$CUS_ID.intValue(), $priceListId:priceListId)

	$act:Activity(type != CodeType.DENTAL, $code:code, $type:type, list== null, $quantity:quantity)
	CusPriceListItem(pricListId==$priceListId, code==$code, type==$type,
	startDate == null || $encStart>= startDate,
        endDate == null || $encStart<= endDate, $price:price, $discount:discount)



then

	if($c.getLogInfo()){logInfo(drools.getRule().getName(),
		" Set list price, price list id="+$priceListId+ " price="+$price+
		" discount="+($discount==null? "null": ""+$discount)+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}


	$act.setList($price==null || $price<0 ? Double.NaN : $price);
	$act.setListPricePredifined(1);
	if($discount != null && $discount>0){
		$act.setDiscountPercentage($discount);
		if($act.getList() != null && !$act.getList().isNaN()){
			$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
			roundDouble(((($act.getList()/100)*$act.getDiscountPercentage())*
			($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
		}

	}
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"price list id="+$priceListId+ " price="+$price +
		" discount="+($discount==null? "null": ""+$discount), "");

	update($act);
end

rule 'DRUG_LIST_PRICE'
dialect 'mvel'
salience -130

when
$c:Claim($providerID:providerID)
 Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
 "Enhanced MID Range Plan TC1 - TC2",
 "Enhanced HIGH END Plan TC1 - TC2",
 "ADNIC - TOP UP TC1",
 "AXA TOP-UP TC1",
 "AXA TOP-UP TC1 & TC2",
 "NAS TOP UP TC1",
 "NAS TOP-UP TC1",
 "OMAN - TOP UP TC1")) from $c.contract
 Encounter($encStart:start) from $c.encounter
 Facility(license == $providerID, $regulator:regulator)
 $act:Activity(type == CodeType.TRADE_DRUG, $code:code, $drugType:drugType, list== null)
 //from $c.activity
 DrugPrice(regulator.intValue() == $regulator.getValue(),
 code==$code,
 startDate == null || $encStart>= startDate,
 endDate == null || $encStart<= endDate,
 $package_Price_to_Public:package_Price_to_Public,
 $unit_Price_to_Public:unit_Price_to_Public)


then
	if($c.getLogInfo()){logInfo(drools.getRule().getName(),"");}
     Boolean unitPrice = false;
     Double price = null;
     if($drugType == null){
     unitPrice = true;
     }else{
     unitPrice = ($drugType.intValue() == 0 || $drugType.intValue() == 1)? false:true;
     }
     price = unitPrice ? $unit_Price_to_Public: $package_Price_to_Public;
     //check if invalid price ...
     price = price==null || price<0 ? Double.NaN : price;
     if($c.getLogInfo()){
          String lngMsg = " Set list price, for drug [Package] price="+price+
                                    " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode();
             if (unitPrice){
                 lngMsg = " Set list price, for drug [Package] price="+price+
                                                " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode();
             }
          logInfo(drools.getRule().getName(),lngMsg);

     }
     $act.setList(price);
     String shortMsg =  "[Unit] price="+price+".";
     if (!unitPrice){
         shortMsg =  "[Package] price="+price+".";
     }
     $act.addOutcome(Severity.INFO, drools.getRule().getName(),
    shortMsg, "");
     update($act);

end

rule 'SPC_LIST_PRICE_MF2504'
dialect 'mvel'
salience -106

when
	$c:Claim(providerID=="MF2504", $SPC_ID:SPC_ID, SPC_ID != null)
	/*Encounter($encStart:start) from $c.encounter

	$spcMasterPriceList: MasterPriceList($masterListId:id, startDate == null || $encStart>= startDate,
        endDate == null || $encStart<= endDate)*/

	$act:Activity($code:code, $type:type, $SPCFactor:SPCFactor, list== null || list.equals(0.0d),
	type == CodeType.HCPCS, code in("A0429",
		"A0398", "A0999", "A0424", "A0422", "A0998"))


        /*MasterPriceListItem(masterListId==$masterListId, type==$type, code==$code, $price:price)*/



then
	String sRuleName = drools.getRule().getName();


	double listPrice = 0.0d;
	if($code.equalsIgnoreCase("A0398")){
	listPrice = 1500d;
	}else if($code.equalsIgnoreCase("A0999")){
	listPrice = 2000d;
	}else if($code.equalsIgnoreCase("A0424")){
	listPrice = 1000d;
	}else if($code.equalsIgnoreCase("A0422")){
	listPrice = 280d;
	}else if($code.equalsIgnoreCase("A0998")){
	listPrice = 750d;
	}


	if($c.getLogInfo()){logInfo(sRuleName,
		" Set list price -EPSD, code="+$code+ " price="+listPrice +"");
	}


		$act.setList(listPrice);
		$act.setListPricePredifined(1);


		$act.addOutcome(Severity.INFO, sRuleName ,
			"Set list price -EPSD, code="+$code+ " price="+listPrice +"", "");


	update($act);
end


rule 'CUS_DRG_LIST_IP_HCPCS'
dialect 'mvel'
 salience -4040
 no-loop
   when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (3,4) ) from $c.encounter
 Activity(type == CodeType.IR_DRG, $code:code,  $weight:drg_weight ,$DRGlist:list)
 DHA_DRG(code==$code,  $HCPCS_Portion:hcpcsPortion)
  exists(Activity(code =="A4649",list>5000.0d) )
  $addOnForHCPCs:Activity(code=="98")
 $Total_High_Cost_HCPCS_Amount :Number(doubleValue>0.0d) from accumulate(
 Activity(type==CodeType.HCPCS,list != null, list>0.0d, !list.isNaN(),$list:list,$hCode:code )
and
 DHA_DRG_HighCost( code==$hCode ), sum($list) )

 then
Double inlierPayment;
if ($weight==null || $weight<0 ){
    inlierPayment=0d;
}else{
    if ($BASE_RATE==null || $BASE_RATE<0){
        inlierPayment=0d;
    }else{
        inlierPayment=($weight*$BASE_RATE *$ipDRGFactor);
    }

}

 // Calculate HCPCs portion
        Double hPortion =roundDouble($HCPCS_Portion*$Total_High_Cost_HCPCS_Amount) ;
//calculate  High-Cost Consumable Addonpayment  used  to  service 98 Price
	 if (hPortion >  inlierPayment){
         Double high_Cost_Consumable_Addonpayment=roundDouble(75*($Total_High_Cost_HCPCS_Amount -inlierPayment)/100);
	 if (high_Cost_Consumable_Addonpayment>0){
	$addOnForHCPCs.setList(high_Cost_Consumable_Addonpayment);
 update($addOnForHCPCs);
            }
	 }
 if($c.logInfo){
logInfo(drools.getRule().getName(),   "Total High Cost HCPCS Amount:"+ $Total_High_Cost_HCPCS_Amount );
	}

$addOnForHCPCs.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Total High Cost HCPCS Amount:"+ $Total_High_Cost_HCPCS_Amount+" hPortion :"+hPortion +" inlier:"+inlierPayment+" list "+$addOnForHCPCs.getList() +"Updated","")
end

rule 'CUS_DRG_LIST_IP_Surgery'
dialect 'mvel'
 salience -4090
 no-loop
 when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (3,4) ) from $c.encounter
 Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight ,$DRGlist:list)
 DHA_DRG(code==$code,  $Surgery_portion:surgeryPortion )
 //================find add Ons================
 $addOnForSurgery:Activity(  code=="98.02" )
   //================Total High Cost Total Surgery Amount================
  $Total_High_Cost_Surgery_Amount :Number(doubleValue>0.0d) from accumulate(
 Activity(type==CodeType.CPT,list != null, list>0.0d, !list.isNaN(),$list:list,$hCode:code )
and
 DHA_DRG_HighCost( code==$hCode ), sum($list) )
 then
  //================Inlier Payment calculation================
  Double inlierPayment=0d;
  if ($weight!=null && $weight>=0 && $BASE_RATE!=null || $BASE_RATE>=0){
      inlierPayment = $weight*$BASE_RATE *$ipDRGFactor;
  }

 // ================ Calculate surgery portion================
 Double sPortion=roundDouble($Surgery_portion *$Total_High_Cost_Surgery_Amount) ;

 //================ calculate High-Cost Surgery Addonpayment used to service 98.02 Price================
 if (sPortion > inlierPayment){
 Double high_Cost_Surgery_Addonpayment=roundDouble(75*($Total_High_Cost_Surgery_Amount -inlierPayment)/100);
 if (high_Cost_Surgery_Addonpayment>0){
 $addOnForSurgery.setList(high_Cost_Surgery_Addonpayment);
 update($addOnForSurgery);
 }
 }
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Set DRG list price, CUS_ID="+$CUS_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
 " total="+($weight*$BASE_RATE *$ipDRGFactor) +
 " to Activity ID="+$addOnForSurgery.getIdCaller()+" code="+$addOnForSurgery.getCode());
 }
$addOnForSurgery.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Total High Cost DRUG _Amount:" +$addOnForSurgery.getList() , " ");


end

rule 'CUS_DRG_LIST_IP_Drug'
dialect 'mvel'
 salience -4060
no-loop
 when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (3,4) ) from $c.encounter
 Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight ,$DRGlist:list)
 DHA_DRG(code==$code,  $Drug_portion:drugPortion)
  $addOnForDrug :Activity( code=="98.1" )
 //----------------Total Drug Amount------------------------------
  $Total_High_Cost_DRUG_Amount :Number(doubleValue>0.0d) from accumulate(
 Activity(type==CodeType.TRADE_DRUG,list != null, list>0.0d, !list.isNaN(),$list:list,$hCode:code )
and
 DHA_DRG_HighCost( code==$hCode ), sum($list) )

 then
Double dPortion =roundDouble($Drug_portion * $Total_High_Cost_DRUG_Amount) ;
 Double inlierPayment=($weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) ));
 if (dPortion > inlierPayment){
 Double high_Cost_Drug_Addonpayment=roundDouble(75*($Total_High_Cost_DRUG_Amount -inlierPayment)/100);
 $addOnForDrug.setList(high_Cost_Drug_Addonpayment);
 update($addOnForDrug);
 }
if($c.logInfo){
logInfo(drools.getRule().getName(),   "Total High Cost DRUG _Amount:"+ $Total_High_Cost_DRUG_Amount );
	}

$addOnForDrug.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Total High Cost DRUG _Amount:"+ $Total_High_Cost_DRUG_Amount+" dPortion:"+dPortion+" inlier:"+inlierPayment+" list "+$addOnForDrug.getList() +"Updated","")
end


rule 'CUS_DRG_LIST_DayCase_Drug'
dialect 'mvel'
 salience -4030
 no-loop
 when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (5,6) ) from $c.encounter
 $addOnForDrug :Activity( code=="98.1" )
 Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight ,$DRGlist:list)
 DHA_DRG(code==$code,  $Drug_portion:drugPortion)

 //----------------Total Drug Amount------------------------------
  $Total_High_Cost_DRUG_Amount :Number(doubleValue>0.0d) from accumulate(
 Activity(type==CodeType.TRADE_DRUG,list != null, list>0.0d, !list.isNaN(),$list:list,$hCode:code )
and
 DHA_DRG_HighCost( code==$hCode ), sum($list) )

 then
Double dPortion =roundDouble($Drug_portion * $Total_High_Cost_DRUG_Amount) ;
 Double inlierPayment=($weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) ));
 if (dPortion > inlierPayment){
 Double high_Cost_Drug_Addonpayment=roundDouble(75*($Total_High_Cost_DRUG_Amount -inlierPayment)/100);
 $addOnForDrug.setList(high_Cost_Drug_Addonpayment);
  update($addOnForDrug);
 }
if($c.logInfo){
logInfo(drools.getRule().getName(),   "Total High Cost DRUG _Amount:"+ $Total_High_Cost_DRUG_Amount );
	}

$addOnForDrug.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Total High Cost DRUG _Amount:"+ $Total_High_Cost_DRUG_Amount+" dPortion:"+dPortion+" inlier:"+inlierPayment+" list "+$addOnForDrug.getList() +"Updated","")

end


rule 'CUS_DRG_LIST_IP_Transfer'
dialect 'mvel'
 salience -4070
no-loop
when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID ,$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (3,4),  endType==4,$end:end.getTime(),$start:start.getTime() ) from $c.encounter
  Activity(type == CodeType.IR_DRG, $code:code,  $weight:drg_weight)
 DHA_DRG(code==$code, $aLos:aLos)
 //================find add Ons================
 $addOnForTransferPayment :Activity( type==CodeType.SERVICE , code=="99.01" )

 then
 //================Inlier Payment calculation================
 Double inlierPayment=( $weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) ));
 //================ calculate transfer amount ================
long los=$end-$start;
 int realLos= Math.round(los/86400000) ;
 realLos=(realLos -1)*50/100 +1;
 Double Transfer_Payment=roundDouble((inlierPayment /$aLos)* realLos);
 $addOnForTransferPayment.setList(Transfer_Payment);
 if($c.logInfo){
 logInfo(drools.getRule().getName(),"");
 }
 $addOnForTransferPayment.addOutcome(Severity.INFO, drools.getRule().getName(),

 " Set Transfer Payment, inlier Payment="+inlierPayment + " aLOS="+$aLos+ " Los :"+realLos+
 " total="+Transfer_Payment , "");
   update($addOnForTransferPayment);


end

rule 'CUS_DRG_LIST_DayCase_HCSPC'
dialect 'mvel'
 salience -4040
no-loop
   when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (5,6) ) from $c.encounter
 $addOnForHCPCs:Activity(code=="98")
 Activity(type == CodeType.IR_DRG, $code:code,  $weight:drg_weight ,$DRGlist:list)
 DHA_DRG(code==$code,  $HCPCS_Portion:hcpcsPortion)
  exists(Activity(code =="A4649",list>5000.0d) )
 $Total_High_Cost_HCPCS_Amount :Number(doubleValue>0.0d) from accumulate(
 Activity(type==CodeType.HCPCS,list != null, list>0.0d, !list.isNaN(),$list:list,$hCode:code )
and
 DHA_DRG_HighCost( code==$hCode ), sum($list) )

 then
 Double inlierPayment=($weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) ));

 // Calculate HCPCs portion
        Double hPortion =roundDouble($HCPCS_Portion*$Total_High_Cost_HCPCS_Amount);
//calculate  High-Cost Consumable Addonpayment  used  to  service 98 Price
	 if (hPortion >  inlierPayment){
         Double high_Cost_Consumable_Addonpayment=roundDouble(75*($Total_High_Cost_HCPCS_Amount -inlierPayment)/100);
	 if (high_Cost_Consumable_Addonpayment>0){
	$addOnForHCPCs.setList(high_Cost_Consumable_Addonpayment);
 update($addOnForHCPCs);
            }
	 }
 if($c.logInfo){
logInfo(drools.getRule().getName(),   "Total High Cost DRUG _Amount:"+ $Total_High_Cost_HCPCS_Amount );
	}

$addOnForHCPCs.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Total High Cost DRUG _Amount:"+ $Total_High_Cost_HCPCS_Amount+" hPortion :"+hPortion +" inlier:"+inlierPayment+" list "+$addOnForHCPCs.getList() +"Updated","")

end

rule 'CUS_DRG_LIST_DayCase'
dialect 'mvel'
  salience -4020
when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),
$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter($encStart:start,$encEnd:end , type in (5,6) ) from $c.encounter
 $act:Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight, list== null)
 DHA_DRG(code==$code,$HCPCS_Portion:hcpcsPortion, $Drug_portion:drugPortion)
 //---------All other services priced at 0 except for ones excluded
 accumulate(a:Activity( )
 and
 DRGExcludedCpts(code==a.code )
 ,$ExcludedCodes:collectList(a.code))
 $zeroPricedServices:java.util.List() from collect ( Activity( type!=CodeType.IR_DRG, code not in ('98','98.1'),
 code not memberOf $ExcludedCodes, list>0 ))
 then
 //================ Inlier Payment calculation================
 Double inlierPayment= $weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) );
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Set DRG list price, CUS_ID="+$CUS_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+" ipDRGFactor"+$ipDRGFactor+
 " total="+($weight*$BASE_RATE *$ipDRGFactor) +
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
 }
 $act.addOutcome(Severity.INFO, drools.getRule().getName(),
 " Set DRG list price, CUS_ID="+$CUS_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
 " total="+($weight*$BASE_RATE *$ipDRGFactor) , "");
 $act.setList(inlierPayment );
 for (Activity a:$zeroPricedServices){
 a.setList(0d);
 update(a);
 }
 update($act)


end

rule 'CUS_DRG_LIST_IP'
dialect 'mvel'
salience -4050
when
	$c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
	Facility(license==$providerID,regulator==Regulator.DHA)
	$cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(), $BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
	Encounter($encStart:start,$encEnd:end , type in  (3,4) ) from $c.encounter
	$act:Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight, list== null)
        DHA_DRG(code==$code,$HCPCS_Portion:hcpcsPortion, $Drug_portion:drugPortion,$Surgery_portion:surgeryPortion)



then
	//  Inlier Payment calculation
      Double inlierPayment= $weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ? Double.NaN :($weight*$BASE_RATE  *$ipDRGFactor) );
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" Set DRG list price, CUS_ID=" + $CUS_ID + " DRG weight=" + $weight + " BASE_RATE=" + $BASE_RATE +
		" total= "+ ($weight*$BASE_RATE  *$ipDRGFactor) +
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}


	$act.setList(inlierPayment );

	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Set DRG list price, CUS_ID=" + $CUS_ID + " DRG weight= " + $weight + " BASE_RATE=" + $BASE_RATE +
		" total= " + ($weight*$BASE_RATE  *$ipDRGFactor) , "");
	update($act);

end

rule 'CUS_DRG_LIST_IP_Outlier'
 dialect 'mvel'
 salience -4080
no-loop
 when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID ,$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter( type in (3,4)) from $c.encounter
 $act:Activity(type == CodeType.IR_DRG, $code:code,  $weight:drg_weight)
 $addOnForOutlier :Activity( type==CodeType.SERVICE , code=="99" )
 //================ calculate Outlier Payment ================
//$costPerClaim:Number(doubleValue>0.0d) from accumulate(
// Activity(type!=CodeType.IR_DRG,list != null, list>0.0d, !list.isNaN(),$quantity:quantity,$hCode:code )
// and
// DHA_DRG_COST_PER_ACTIVITY(code==$hCode, $BaseUnitsAnesthesia:BaseUnitsAnesthesia, $cost:cost  )
// , sum($cost*($BaseUnitsAnesthesia+$quantity)))

 then
// //================Inlier Payment calculation================
// Double inlierPayment=( $weight==null || $weight<0 ? Double.NaN : ($BASE_RATE==null || $BASE_RATE<0 ?
//Double.NaN :($weight*$BASE_RATE *$ipDRGFactor) ));
// //================ calculate 	Outlier================
//Double outlier=0.0d;
// if ($costPerClaim >inlierPayment){
//  outlier =roundDouble($costPerClaim-((inlierPayment + 36024) * 60/100));
// if (outlier>0 && outlier<=inlierPayment){
// $addOnForOutlier.setList(outlier);
//update($addOnForOutlier);
// }
// }
// //+++++++++++++++++++print log +++++++++++++++++++++++++++++++++++++++++
// if($c.logInfo){logInfo(drools.getRule().getName(),
//
// " ");
// }
// $addOnForOutlier.addOutcome(Severity.INFO, drools.getRule().getName(),"outlier :"+outlier +" inlierPayment:"+inlierPayment +" $costPerClaim:"+$costPerClaim  , "");

end

rule 'COPAY_CONSULTATION_EXCLUDING_MATERNITY_EM'
dialect 'mvel'
salience -3215
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup,  $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*"
	)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_CONSULTATION_EXCLUDING_MATERNITY_NOT_EM'
dialect 'mvel'
salience -3213
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.SERVICE,/* code in ("9", "10", "11"),*/
		gross != null, gross>0, !gross.isNaN(), copayment== null)
	ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.getLogInfo()){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_DENTAL_CONSULTATION'
dialect 'mvel'
salience -3217
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Dental Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	ActivityGroup( type==CodeType.DENTAL.getValue(), name=="Dental Consultation") from $groups

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_DENTAL_EXCLUDING_DCONSULTATION'
dialect 'mvel'
salience -3219
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Dental Excluding Dental Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	not(ActivityGroup( type==CodeType.DENTAL.getValue(), name=="Dental Consultation") from $groups)

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_DENTAL_EXCLUDING_ORTHODONTIC_PROSTHESIS'
dialect 'mvel'
salience -3223
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Dental Excluding Orthodontic & Prosthesis", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	not(ActivityGroup(type==CodeType.DENTAL.getValue(), name=="Orthodontic Procedures" ||
							name=="Prosthodontics_removable" ||
							name=="Prosthodontics_fixed" ) from $groups)

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'COPAY_DENTAL_ORTHODONTIC_PROSTHESIS'
dialect 'mvel'
salience -3221
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Dental Orthodontic & Prosthesis", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	ActivityGroup(type==CodeType.DENTAL.getValue(), name=="Orthodontic Procedures" ||
							name=="Prosthodontics_removable" ||
							name=="Prosthodontics_fixed" ) from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_EM_EXCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -3231
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation excluding Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$diagnostic_acts: Set(size <= 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)
	$act: Activity( type==CodeType.CPT,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Evaluation And Management") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'COPAY_EM_INCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -3229
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation including Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$diagnostic_acts: Set(size > 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)
	$act: Activity( type==CodeType.CPT,
		gross != null, gross>0, !gross.isNaN(), copayment== null, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Evaluation And Management") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_MATERNITY_CONSULTATION_EM'
dialect 'mvel'
salience -3211
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$groups:activityGroup,  $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*"
	)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}
end

rule 'COPAY_MATERNITY_CONSULTATION_NOT_EM'
dialect 'mvel'
salience -3209
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.SERVICE, /*code in ("9", "10", "11"), */
		gross != null, gross>0, !gross.isNaN(), copayment== null)
	ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_MATERNITY_EXCLUDING_MCONSULTATION'
dialect 'mvel'
salience -3207
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
	$coPayment:CoPayment(type=="Maternity Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	Diagnosis($dcode:code) from $c.diagnosis
	$codeGroup: CodeGroup($codeGroupID:id, type == CodeType.ICD9 || type==CodeType.ICD10,
		name=="Antenatal-Screening ICD_10" ||
		name=="Antenatal-Screening ICD_9",
		code==$dcode)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), copayment== null, 			$clinician:clinician)
	Clinician(facility_license==$providerID, license == $clinician,
			profession.toLowerCase() matches ".*obstetrics & gynecology.*") ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_OUTPATIENT_EXCLUDING_MATERNITY'
dialect 'mvel'
salience -3205
when
	$c:Claim(patient != null, $patient:patient)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
	$coPayment:CoPayment(type=="Outpatient excluding Maternity", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal)

	$act: Activity(gross != null, gross>0, !gross.isNaN(), copayment== null, $gross:gross)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_OUTPATIENT_EXCLUDING_PHYSIOTHERAPY'
dialect 'mvel'
salience -3227
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Outpatient Excluding Physiotherapy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type!=CodeType.TRADE_DRUG,
		gross != null, gross>0, !gross.isNaN(), copayment == null, $groups:activityGroup)
	not(ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Physical Medicine & Rehabilitation") from $groups)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'COPAY_SERVICE_EXCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -3235
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation excluding Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$diagnostic_acts: Set(size <= 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)
	$act: Activity( type==CodeType.SERVICE,
		gross != null, gross>0, !gross.isNaN(), copayment == null, $groups:activityGroup)
	ActivityGroup( type.intValue()==CodeType.SERVICE.getValue(),
		name=="Consultations") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end
//
rule 'COPAY_SERVICE_INCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -3233
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $coPayment:CoPayment(type=="Consultation including Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$diagnostic_acts: Set(size > 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)
	$act: Activity( type==CodeType.SERVICE,
		gross != null, gross>0, !gross.isNaN(), copayment == null, $groups:activityGroup)
	ActivityGroup( type.intValue()==CodeType.SERVICE.getValue(),
		name=="Consultations") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double value = $coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible());
	double futureCopayTotal = $claimTotal+ value;
	double appliedCopay = 0.0d;
	if (futureCopayTotal > $ceiling){
		appliedCopay = $ceiling - $claimTotal;
            	appliedCopay = appliedCopay<0?-1*appliedCopay:appliedCopay;
	}else{
		appliedCopay = value;
	}
	appliedCopay = roundDouble(appliedCopay);
    	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$coPayment.setClaimTotal($claimTotal+appliedCopay);
	update($act);
	update($coPayment);
}else{
	double appliedCopay = 0.0d;
	appliedCopay = roundDouble($coPayment.getValue($act.getGrossMinusDeductible(),$act.getDeductible()));
	$act.setCopayment(appliedCopay);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set coPayment to " + appliedCopay + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set coPayment to " + appliedCopay +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'CUS_PROC_LIST_PRICE'
dialect 'mvel'
salience -108
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null, primaryProc==null,
		secondaryProc==null, thirdProc==null, forthProc==null)

	CusContract(ID.intValue() ==$CUS_ID.intValue(),
	multipleProcedure != null, multipleProcedure==1,
	(primaryProcedure != null && primaryProcedure>0) ||
	(secondaryProcedure!= null && secondaryProcedure>0) ||
	(thirdProcedure != null && thirdProcedure>0) ||
	(forthProcedure != null && forthProcedure>0),
	$priceListId:priceListId, $primaryProcedure:primaryProcedure,
	$secondaryProcedure:secondaryProcedure,
	$thirdProcedure:thirdProcedure,
	$forthProcedure:forthProcedure)
then
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" Set multiple Procedure percentage(s), From Cus_ID="+$CUS_ID);
	}
	$c.setPrimaryProc($primaryProcedure!= null && $primaryProcedure>0?$primaryProcedure:null);
	$c.setSecondaryProc($secondaryProcedure!= null && $secondaryProcedure>0?$secondaryProcedure:null);
	$c.setThirdProc($thirdProcedure!= null && $thirdProcedure>0?$thirdProcedure:null);
	$c.setForthProc($forthProcedure!= null && $forthProcedure>0?$forthProcedure:null);
	$c.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Set multiple Procedure percentage(s), From Cus_ID="+$CUS_ID.intValue()+".", "");
	update($c);

end

rule 'DEDUCTIBLE_CONSULTATION_EXCLUDING_MATERNITY_EM'
dialect 'mvel'
salience -1515
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup,  $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*"
	)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_CONSULTATION_EXCLUDING_MATERNITY_NOT_EM'
dialect 'mvel'
salience -1513
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.SERVICE, /*code in ("9", "10", "11"), */
		gross != null, gross>0, !gross.isNaN(), deductible == null)
	ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_DENTAL_CONSULTATION'
dialect 'mvel'
salience -1517
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType(type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Dental Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup( type==CodeType.DENTAL.getValue(), name=="Dental Consultation") from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_DENTAL_EXCLUDING_DCONSULTATION'
dialect 'mvel'
salience -1519
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Dental Excluding Dental Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	not(ActivityGroup( type==CodeType.DENTAL.getValue(), name=="Dental Consultation") from $groups)

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_DENTAL_EXCLUDING_ORTHODONTIC_PROSTHESIS'
dialect 'mvel'
salience -1523
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType(type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Dental Excluding Orthodontic & Prosthesis", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	not(ActivityGroup(type==CodeType.DENTAL.getValue(), name=="Orthodontic Procedures" ||
							name=="Prosthodontics_removable" ||
							name=="Prosthodontics_fixed" ) from $groups)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_DENTAL_ORTHODONTIC_PROSTHESIS'
dialect 'mvel'
salience -1521
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Dental) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Dental Orthodontic & Prosthesis", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.DENTAL,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup(type==CodeType.DENTAL.getValue(), name=="Orthodontic Procedures" ||
							name=="Prosthodontics_removable" ||
							name=="Prosthodontics_fixed" ) from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_EM_INCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -1529
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation including Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$diagnostic_acts: Set(size > 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)

	$act: Activity( type==CodeType.CPT,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Evaluation And Management") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_EM_EXCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -1531
when
	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation excluding Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$diagnostic_acts: Set(size <= 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)

	$act: Activity( type==CodeType.CPT,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Evaluation And Management") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_MATERNITY_CONSULTATION_EM'
dialect 'mvel'
salience -1511
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup,  $clinician:clinician,
	clinician not matches "GN.*",
	clinician not matches "GP.*",
	clinician not matches "T.*",
	clinician not matches "GT.*"
	)
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_MATERNITY_CONSULTATION_NOT_EM'
dialect 'mvel'
salience -1509
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type==CodeType.SERVICE, /*code in ("9", "10", "11"), */
		gross != null, gross>0, !gross.isNaN(), deductible == null)

	ActivityGroup(type.intValue() == CodeType.SERVICE.getValue(), name=="Consultations") from $act.activityGroup

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_MATERNITY_EXCLUDING_MCONSULTATION'
dialect 'mvel'
salience -1507
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
	ClaimType (type==ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Maternity Excluding Maternity Consultation", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)


	Diagnosis($dcode:code) from $c.diagnosis
	$codeGroup: CodeGroup($codeGroupID:id, type == CodeType.ICD9 || type==CodeType.ICD10,
		name=="Antenatal-Screening ICD_10" ||
		name=="Antenatal-Screening ICD_9",
		code==$dcode)
	$act: Activity( type==CodeType.CPT, gross != null, gross>0, !gross.isNaN(), deductible == null, 			$groups:activityGroup,  $clinician:clinician)

	Clinician(facility_license==$providerID, license == $clinician,
			profession.toLowerCase() matches ".*obstetrics & gynecology.*") ;

then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_OUTPATIENT_EXCLUDING_MATERNITY'
dialect 'mvel'
salience -1505
when
	$c:Claim(patient != null, $patient:patient)
	ClaimType (type!=ClaimType.Maternity) from $c.claimType
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Outpatient excluding Maternity", value>0,
        $ceiling:ceiling, $claimTotal:claimTotal, $value:value)
        $act:Activity(gross != null, gross>0, !gross.isNaN(), deductible == null, $gross:gross)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_OUTPATIENT_EXCLUDING_PHYSIOTHERAPY'
dialect 'mvel'
salience -1527
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Outpatient Excluding Physiotherapy", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type!=CodeType.TRADE_DRUG,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	not(ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Physical Medicine & Rehabilitation") from $groups)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'DEDUCTIBLE_SERVICE_EXCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -1535
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation excluding Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$diagnostic_acts: Set(size <= 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)

	$act: Activity( type==CodeType.SERVICE,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup( type.intValue()==CodeType.SERVICE.getValue(),
		name=="Consultations") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DEDUCTIBLE_SERVICE_INCLUDING_DIAGNOSTIC'
dialect 'mvel'
salience -1533
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Consultation including Diagnostic", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)
	$diagnostic_acts: Set(size > 0) from accumulate (
	    $diagnostic_act: Activity( type==CodeType.CPT, $diagnostic_act_groups:activityGroup)
	    and
	    ActivityGroup( type==CodeType.CPT.getValue(),  name=="DGTest_CPT_9_Series") from 				$diagnostic_act_groups;
	    collectSet($diagnostic_act)
	)

	$act: Activity( type==CodeType.SERVICE,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	ActivityGroup( type.intValue()==CodeType.SERVICE.getValue(),
		name=="Consultations") from $groups
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}


end

rule 'DENY_DISCOUNT'
dialect 'mvel'
salience -180
when
	$c:Claim(receiverID=="INS026", providerID=="DHA-F-0046260-C")
	Contract(packageName=="Network 5") from $c.contract
	$act:Activity(discount == null)
then
if($c.logInfo){logInfo(drools.getRule().getName(),
		" Set discount=0"+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage(0.0d);
	$act.setDiscount(0.0d);
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Set discount=0", "");
	update($act);

end

rule 'SPC_DRG_LIST_PRICE'
dialect 'mvel'
salience -140
when
	$c:Claim($providerID:providerID,$SPC_ID:SPC_ID, SPC_ID != null)
	$spcContract:SPCContract(ID.intValue() ==$SPC_ID.intValue(), $BASE_RATE:BASE_RATE)
Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract
	Encounter($encStart:start) from $c.encounter

	$act:Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight, list== null)


then
    if($weight == null){
        $weight=0.0d;
    }
    if($BASE_RATE == null){
        $BASE_RATE=0.0d;
    }
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" Set DRG list price, SPC_ID="+$SPC_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
		" total="+($weight*$BASE_RATE)+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.setList($weight==null || $weight<0 ? 0.0d :
			($BASE_RATE==null || $BASE_RATE<0 ? 0.0d :($weight*$BASE_RATE)));
	$act.setDiscountPercentage(0d);

	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Set DRG list price, SPC_ID="+$SPC_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
		" total="+($weight*$BASE_RATE), "");
	update($act);

end

rule 'CUS_DRG_LIST_PRICE'
dialect 'mvel'
salience -150
when
	$c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
	 Facility(license==$providerID,regulator==Regulator.HAAD)
	$cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(), $BASE_RATE:BASE_RATE)
Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
"Enhanced MID Range Plan TC1 - TC2",
"Enhanced HIGH END Plan TC1 - TC2",
"ADNIC - TOP UP TC1",
"AXA TOP-UP TC1",
"AXA TOP-UP TC1 & TC2",
"NAS TOP UP TC1",
"NAS TOP-UP TC1",
"OMAN - TOP UP TC1")) from $c.contract
	Encounter($encStart:start) from $c.encounter
	$act:Activity(type == CodeType.IR_DRG, $code:code, $start:start, $weight:drg_weight, list== null)

then
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" Set DRG list price, CUS_ID="+$CUS_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
		" total="+($weight*$BASE_RATE)+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$act.setList($weight==null || $weight<0 ? Double.NaN :
			($BASE_RATE==null || $BASE_RATE<0 ? Double.NaN :($weight*$BASE_RATE)));
	$act.setDiscountPercentage(0d);
/*	if($discount != null && $discount>=0){
		$act.setDiscountPercentage($discount);
		if($act.getList() != null && !$act.getList().isNaN()){
			$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
			roundDouble(((($act.getList()/100)*$act.getDiscountPercentage())*
			($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
		}
	}*/
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Set DRG list price, CUS_ID="+$CUS_ID + " DRG weight="+$weight+ " BASE_RATE="+$BASE_RATE+
		" total="+($weight*$BASE_RATE), "");
	update($act);

end

rule 'DENY_DISCOUNT_DHA_IP_Anesthesia'
dialect 'mvel'
salience -181
when
	$c:Claim($providerID:providerID)
	Facility(license == $providerID, regulator==Regulator.DHA)
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter
	$act:Activity(type==CodeType.CPT, discount == null, $groups:activityGroup)
	ActivityGroup(type==CodeType.CPT.getValue(), name=="Anesthesia Discount Exclusion") from $groups ;
then
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" DHA-IP Anesthesia, Set discount=0"+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage(0.0d);
	$act.setDiscount(0.0d);
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" DHA-IP Anesthesia, Set discount=0", "");
	update($act);
end

rule 'DENY_DISCOUNT_DHA_IP_OT'
dialect 'mvel'
salience -182
when
	$c:Claim($providerID:providerID)
	Facility(license == $providerID, regulator==Regulator.DHA)
	Encounter($encType:type, type>=3 && type<=6) from $c.encounter
	$act:Activity(type==CodeType.SERVICE, discount == null, $groups:activityGroup)
	ActivityGroup(type==CodeType.SERVICE.getValue(), name=="OT Discount Exclusion") from $groups ;
then
	if($c.logInfo){logInfo(drools.getRule().getName(),
		" DHA-IP OT, Set discount=0"+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage(0.0d);
	$act.setDiscount(0.0d);
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" DHA-IP OT, Set discount=0", "");
	update($act);
end

rule 'FORCE_NO_PATIENT_SHARE_DCAS'
dialect 'mvel'
salience -511
when
	$c:Claim(providerID=="DHA-F-0000687", $providerID:providerID)
	$act: Activity(deductible == null || copayment== null)
then
	String sRuleName = drools.getRule().getName();
	String sMsg = "DCAS, Set copay and deductible to 0";

	if($c.logInfo){logInfo(sRuleName,
	sMsg+
	" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDeductible(0d);
	$act.setCopayment(0d);
	$act.addOutcome(Severity.INFO, sRuleName ,
		sMsg, "");
	update($act);



end

rule 'CUS_DISCOUNT_OP_DENTAL'
dialect 'mvel'
salience -219
when
	$c:Claim($CUS_DENTAL_ID:CUS_DENTAL_ID, CUS_DENTAL_ID != null)
	Encounter($encType:type, type<3 || type>6) from $c.encounter
	CusContract(ID.intValue() ==$CUS_DENTAL_ID.intValue(), $OP_DISCOUNT:OP_DISCOUNT)
	$act:Activity(type != CodeType.TRADE_DRUG, type != CodeType.HCPCS, type == CodeType.DENTAL, $code:code, list != null, !list.isNaN(),
	discount == null, $list:list, $quantity: quantity)

then
	if($c.logInfo){logInfo(drools.getRule().getName(), " Apply discount="+$OP_DISCOUNT+
		" to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	}

	$act.setDiscountPercentage($OP_DISCOUNT==null || $OP_DISCOUNT<0 ? Double.NaN : $OP_DISCOUNT);

	$act.setDiscount($act.getDiscountPercentage().isNaN() ? 0 :
	roundDouble(((($list/100)*$act.getDiscountPercentage())*
	($quantity==null || $quantity.isNaN() || $quantity<0?1:$quantity))));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" Apply discount=" + $OP_DISCOUNT+
		"", "");
	update($act);
end

rule 'SPC_CODE_FACTOR'
dialect 'mvel'
salience -70
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null, CUS_ID== null)
 Encounter($start:start) from $c.encounter
 $act:Activity(type != CodeType.TRADE_DRUG, $type:type, $code:code, SPCFactor == null)
 $spcCodeFactor : SPCCodeFactor(priceListId.intValue()==$SPC_ID.intValue(), type==$type, code == $code,
 startDate == null || $start>= startDate,
 endDate == null || $start<= endDate)
then
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Apply code factor="+$spcCodeFactor.getFactor()+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
 }
 $act.setSPCFactor($spcCodeFactor.getFactor());
 $act.addOutcome(Severity.INFO, drools.getRule().getName(),
 " Apply code factor=" + $spcCodeFactor.getFactor()+"", "");
 update($act);

end

rule 'SPC_WITH_PACKAGE'
dialect 'mvel'
salience -10
when
	$c:Claim($providerID:providerID, $receiverID:receiverID, SPC_ID == null, CUS_ID== null)
 Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
 "Enhanced MID Range Plan TC1 - TC2",
 "Enhanced HIGH END Plan TC1 - TC2",
 "ADNIC - TOP UP TC1",
 "AXA TOP-UP TC1",
 "AXA TOP-UP TC1 & TC2",
 "NAS TOP UP TC1",
 "NAS TOP-UP TC1",
 "OMAN - TOP UP TC1")) from $c.contract
 //not(Activity(type==CodeType.DENTAL)) //PRICE-214
 //Facility(license == $providerID, regulator==Regulator.HAAD)
 Encounter($start:start) from $c.encounter
 $spcContract:SPCContract(insurerLicense==$receiverID,
 facilityLicense == $providerID, packageName == $packageName,
 startDate == null || $start>= startDate,
 endDate == null || $start<= endDate)
then
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Apply SPC contract ID="+$spcContract.getID()+" Encounter start="+$start);
 }
 $c.setSPC_ID($spcContract.getID());
 //$c.setCUS_ID(null);
 $c.addOutcome(Severity.INFO, drools.getRule().getName(),"Apply SPC contract ID="+$spcContract.getID()+" Encounter start="+$start, "");
 update($c);

end

rule 'SPC_GROUP_FACTOR'
dialect 'mvel'
salience -80
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
 Encounter($start:start) from $c.encounter
 $act:Activity($type:type, $code:code, SPCFactor == null)
 //from $c.activity
 ActivityGroup(type.intValue() != CodeType.TRADE_DRUG.getValue(), $activityCodeGroupID:id,
$activityCodeGroupName:name) from $act.activityGroup
 $SPCGroupFactor: SPCGroupFactor(priceListId.intValue()==$SPC_ID.intValue(),
 groupID.intValue()==$activityCodeGroupID.intValue(),
 startDate == null || $start>= startDate,
 endDate == null || $start<= endDate)
then
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Apply group "+$activityCodeGroupName+" factor="+$SPCGroupFactor.getFactor()+
 " to Activity ID="+$act.getIdCaller()+
 " code="+$act.getCode());
 }
 $act.setSPCFactor($SPCGroupFactor.getFactor());
 $act.addOutcome(Severity.INFO, drools.getRule().getName(),
 " Apply group "+$activityCodeGroupName+" factor="+
 $SPCGroupFactor.getFactor()+"", "");
 update($act);

end

rule 'SPC_NO_PACKAGE'
dialect 'mvel'
salience -20
when
$c:Claim($providerID:providerID, $receiverID:receiverID, SPC_ID == null, CUS_ID== null)
 Contract($packageName:packageName, packageName not in ("Enhanced LOW END Plan TC1 - TC2",
 "Enhanced MID Range Plan TC1 - TC2",
 "Enhanced HIGH END Plan TC1 - TC2",
 "ADNIC - TOP UP TC1",
 "AXA TOP-UP TC1",
 "AXA TOP-UP TC1 & TC2",
 "NAS TOP UP TC1",
 "NAS TOP-UP TC1",
 "OMAN - TOP UP TC1")) from $c.contract
 //not(Activity(type==CodeType.DENTAL)) //PRICE-214
 //Facility(license == $providerID, regulator==Regulator.HAAD)
 Encounter($start:start) from $c.encounter
 not(SPCContract(insurerLicense==$receiverID,
 facilityLicense == $providerID, packageName == $packageName,
 startDate == null || $start>= startDate,
 endDate == null || $start<= endDate))
 $spcContract: SPCContract(insurerLicense==$receiverID,
 facilityLicense == $providerID, packageName == null,
 startDate == null || $start>= startDate,
 endDate == null || $start<= endDate)
then
 if($c.logInfo){logInfo(drools.getRule().getName(),
 " Apply SPC contract ID="+$spcContract.getID()+" Encounter start="+$start);
 }
 $c.setSPC_ID($spcContract.getID());
 //$c.setCUS_ID(null);
 $c.addOutcome(Severity.INFO, drools.getRule().getName(),
 "Apply SPC contract ID="+$spcContract.getID()+" Encounter start="+$start, "");
 update($c);

end

rule 'SPC_LIST_PRICE'
dialect 'mvel'
salience -105
when
	$c:Claim($SPC_ID:SPC_ID, SPC_ID != null)
 Encounter($encStart:start) from $c.encounter
 $spcMasterPriceList: MasterPriceList($masterListId:id, startDate == null || $encStart>= startDate,
 endDate == null || $encStart<= endDate)
 $act:Activity($code:code, $type:type,type != CodeType.IR_DRG, $SPCFactor:SPCFactor, list== null)
   MasterPriceListItem(masterListId==$masterListId, type==$type, code==$code, $price:price)
then
 String sRuleName = drools.getRule().getName();
 double listPrice = roundDouble($price*$SPCFactor);
 if($c.logInfo){logInfo(sRuleName,
 " Set list price, factor="+$SPCFactor+ " price="+listPrice +"");
 }
 $act.setList($price==null || $price<0 || listPrice <0 ? Double.NaN : roundDouble			($price*$SPCFactor));
 $act.setListPricePredifined(1);
 $act.addOutcome(Severity.INFO, sRuleName ,
 "Set list price, factor="+$SPCFactor+ " price="+listPrice +"", "");
 update($act);

end

rule 'CUS_DRG_TEST'
dialect 'mvel'
  salience -4025
when
 $c:Claim($providerID:providerID,$CUS_ID:CUS_ID, CUS_ID != null)
 Facility(license==$providerID,regulator==Regulator.DHA)
 $cusContract:CusContract(ID.intValue() ==$CUS_ID.intValue(),
$BASE_RATE:BASE_RATE,$ipDRGFactor:IP_DRGFactor)
 Encounter($encStart:start,$encEnd:end , type in (5,6) ) from $c.encounter
 $act:Activity( )

 then
 //================ Inlier Payment calculation================

 $act.addOutcome(Severity.INFO, drools.getRule().getName(), "  test","test");

end

rule 'Set_Activity_Cash'
dialect 'mvel'
salience -6000
when
	$c:Claim( )
	$act: Activity( list != null, !list.isNaN(),$list:list,
			custom_Price_Types!=null, custom_Price_Types.contains("1"),
			gross != null, $gross:gross,
			net!=null,$net:net ,
			$patientshare:patientShare,patientShare!=null)
	not(ActivityOutcome(ruleName=="Set_Activity_Cash") from $act.outcome)

then
if($c.logInfo){
logInfo(drools.getRule().getName(),"   based on list price = " + $list + " to Activity ID=" + $act.getIdCaller()  +" code= [" + $act.getCode()+"]");
	}

double appliedPatientShare =roundDouble(new Double($patientshare));
double appliedNet=roundDouble(new Double($net));
/*if  ($patientshare!=null ){
appliedPatientShare=roundDouble(new Double($patientshare));
}*/

 $act.setPatientShare( roundDouble(appliedPatientShare +appliedNet));
 $act.setNet(0.0d);

$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" set Patient share ["+roundDouble(appliedPatientShare +appliedNet)+"] .", "");
	update($act);
end

rule 'Apply_Rejected_Amount'
dialect 'mvel'
salience -5010

when
	$c:Claim( )
	$act: Activity(gross != null,$gross:gross, list != null, !list.isNaN(),$list:list,
			custom_Price_Types!=null, custom_Price_Types.contains("2"),
			net!=null ,$net:net ,
			rejected_Amount!=null,rejected_Amount>0.0d,$rejected_Amount:rejected_Amount,$patientshare:patientShare)
	not(ActivityOutcome(ruleName=="Set_Activity_Cash") from $act.outcome)
	not(ActivityOutcome(ruleName=="Apply_Rejected_Amount") from $act.outcome)
then
	if($c.logInfo){logInfo(drools.getRule().getName(),
		"based on list price = " + $list + " to Activity ID=" + $act.getIdCaller()  +" code=[" + $act.getCode()+"]");
	}

	double appliedPatientShare =roundDouble( $patientshare );
	double appliedNet=roundDouble( $net );
	double appliedRejected_Amount=roundDouble($rejected_Amount);

	$act.setNet(appliedNet-appliedRejected_Amount );
	/*if ($patientshare==null){
	$patientshare=0;
	}*/
	$act.setPatientShare(appliedPatientShare +appliedRejected_Amount );
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		" ["+appliedRejected_Amount +"] based on list price " + $list +"", "");
	update($act);
end

rule 'CALC_Observation_50'
dialect 'mvel'
salience -5450
no-loop
when
	$c:Claim(gross==null )
	$act: Activity( net!= null, !net.isNaN(),$net:net,$groups:activityGroup,   $obs:observation )
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
	exists( Observation(code=="CPT modifier",$value:value,valueType=="Modifiers", value==50) from  $obs)
then
	if($c.logInfo){
	logInfo(drools.getRule().getName(),
		"Based on list, net= " + $net*150/100 + " to Activity ID=" + $act.getIdCaller()  +" code=" + 		$act.getCode());
	}


 	$act.setNet(roundDouble($net*150/100));

	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Based on list net= " +$net*150/100 + " to Activity ID=" + $act.getIdCaller()  +" code=" + 		$act.getCode(), "");
	update($act);

end

rule 'CALC_Observation_52'
dialect 'mvel'
salience -310
no-loop
when
	$c:Claim(gross==null )
	$act: Activity( list != null,gross == null, !list.isNaN(),$list:list,$groups:activityGroup,   $obs:observation )
	ActivityGroup( type==CodeType.CPT.getValue(), name=="Evaluation And Management") from $groups ;
	 exists(Observation(code=="CPT modifier",$value:value,valueType=="Modifiers",value==52) from  $obs)
then
	if($c.logInfo){
	logInfo(drools.getRule().getName(),
		"Based on list price = " + $list*50/100 + " to Activity ID=" + $act.getIdCaller()  +" code=" + 		$act.getCode());
	}

 	$act.setList(roundDouble($list*50/100));
	$act.addOutcome(Severity.INFO, drools.getRule().getName(),
		"Based on list price = " + $list*50/100 + " to Activity ID=" + $act.getIdCaller()  +" code=" + 		$act.getCode(), "");
	update($act);

end
//
rule 'LIST_PRICE_CUSTOME_CODE'
dialect 'mvel'
salience -300
when
	$c:Claim( )

 $act:Activity(type == CodeType.CustomCode, $code:code, $type:type, list== null, $quantity:quantity)
 CustomCode(code==$code,$price:price )

 then
 if($c.logInfo){
logInfo(drools.getRule().getName()," Set list price  price="+$price+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
 }
 if ($price==null || $price<0 ){
     $act.setList(0d);
 }else{

     $act.setList($price);
 }

 $act.addOutcome(Severity.INFO, drools.getRule().getName(), "Set list price to  Package item  price="+$price+ " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode(), "");
 update($act);
end

rule 'LIST_PRICE_Package_Code'
dialect 'mvel'
salience -270
when
	$c:Claim( )

 $act:Activity(type == CodeType.Package,   $code:code, $type:type, list== null,packageGroupID==null || packageGroupID==0 )

  PackageCode($Pcode:code,code==$code , $packagePrice:price,$itemLevel:isItemLevel ,isItemLevel ==null || !isItemLevel)


 then
 if($c.logInfo){
logInfo(drools.getRule().getName()," Set list price  price="+$packagePrice+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
 }

 $act.setList($packagePrice);
  $act.addOutcome(Severity.INFO, drools.getRule().getName(), "Set list price to  Package item  price="+$packagePrice+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode() +" itemLevel="+$itemLevel+" Pcode:"+$Pcode, "");
 update($act);
end

rule 'LIST_PRICE_Package_Items'
dialect 'mvel'
salience -260
when
	$c:Claim( )
 	$act:Activity( $packageGroupID:packageGroupID,    $code:code , list== null )
  	PackageItemCode($packageID:packageID,packageID==$packageGroupID,code==$code,$price:price)
  	PackageCode(packageGroupID==$packageGroupID,$packagePrice:price,!isItemLevel,price>0)


 then
 	if($c.logInfo){
	logInfo(drools.getRule().getName()," Set list price  price="+0+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	 }

 $act.setList(0.0d);
 $act.addOutcome(Severity.INFO, drools.getRule().getName(), "Set list price to  Package item  to  zero="+0+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode() +"because  the  parent has price>0 ",  "");
 update($act);


end

rule 'LIST_PRICE_Package_Items_Child'
dialect 'mvel'
salience -280
when
	$c:Claim( )
 	$act:Activity( $packageGroupID:packageGroupID,    $code:code , list== null )
	PackageCode(packageGroupID==$packageGroupID,$packagePrice:price, isItemLevel)
  	PackageItemCode($packageID:packageID,packageID==$packageGroupID,code==$code,$price:price,price>0)



 then
 	if($c.logInfo){
	logInfo(drools.getRule().getName()," Set list price  price="+$price+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	 }

 $act.setList($price);
 $act.addOutcome(Severity.INFO, drools.getRule().getName(), "Set list price to  Package item  to  price="+$price+
 " to Activity ID="+$act.getIdCaller()+" code="+$act.getCode() +" Package Id "+$packageID +"$packageGroupID "+$packageGroupID, "");
 update($act);


end

rule 'LIST_PRICE_Package_Items_Parent'
dialect 'mvel'
salience -290
when
	$c:Claim( )
 	$act:Activity( $packageGroupID:packageGroupID,    $code:code , list== null )
	PackageCode(packageGroupID==$packageGroupID,$packagePrice:price, isItemLevel,$code==code)




 then
 	if($c.logInfo){
	logInfo(drools.getRule().getName()," Set list price to 0 to Activity ID="+$act.getIdCaller()+" code="+$act.getCode());
	 }

 $act.setList(0.0d);
 $act.addOutcome(Severity.INFO, drools.getRule().getName(), "Set list price to 0 to Activity ID="+$act.getIdCaller()+" code="+$act.getCode() +" $packageGroupID "+$packageGroupID, "");
 update($act);


end

rule 'DEDUCTIBLE_OUTPATIENT_EXCLUDING_Laboratory'
dialect 'mvel'
salience -1533
when

	$c:Claim(patient != null, $patient:patient, $providerID:providerID)
        Encounter($encType:type, type in (1,2)) from $c.encounter
        $deductible:Deductible(type=="Outpatient Excluding Laboratory", value>0,
		$ceiling:ceiling, $claimTotal:claimTotal, $value:value)

	$act: Activity( type!=CodeType.TRADE_DRUG,
		gross != null, gross>0, !gross.isNaN(), deductible == null, $groups:activityGroup)
	not(ActivityGroup( type==CodeType.CPT.getValue(),
		name=="Pathology & Laboratory") from $groups)
then
String sRuleName = drools.getRule().getName();
if($ceiling != null && !$ceiling.isNaN() && $ceiling > 0.0d){
	double futureDeductibleTotal = $claimTotal+ $value;
	double appliedDeductible = 0.0d;
	if (futureDeductibleTotal > $ceiling){
		appliedDeductible = $ceiling - $claimTotal;
            	appliedDeductible = appliedDeductible<0?-1*appliedDeductible:appliedDeductible;
	}else{
		appliedDeductible = $value;
	}
	appliedDeductible = roundDouble(appliedDeductible);
        $act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");
	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	$deductible.setClaimTotal($claimTotal+appliedDeductible);
	update($act);
	update($deductible);
}else{
	double appliedDeductible = 0.0d;
	appliedDeductible = roundDouble($value);
	$act.setDeductible(appliedDeductible);
	$act.addOutcome(Severity.INFO, sRuleName ,
        	" Set deductible to " + appliedDeductible + ".", "");

	if($c.logInfo){logInfo(sRuleName," Set deductible to " + appliedDeductible +
		" For Activity="+$act.getIdCaller()+" code="+$act.getCode());
	}
	update($act);
}

end

rule 'HCPCS_LIST_PRICE'
dialect 'mvel'
salience -95
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID == null,$providerID:providerID )
	$act:Activity($code:code, $type:type,$providerCode:providerCode, type==CodeType.HCPCS, list== null)
 	RCMFacilityCodeMapping( activityCode==$code,facilityLisence==$providerID, providerActivityCode==$providerCode, $price:price)
then
 String sRuleName = drools.getRule().getName();
 double listPrice = ($price==null || $price<0   )?0.0d :  $price ;
 if($c.logInfo){
  logInfo(sRuleName,
 " Set list price,   price="+listPrice +", HCPCS Markup = there is  none,");
 }
 $act.setList(listPrice );

 $act.addOutcome(Severity.INFO, sRuleName ,
 "Set list  price="+listPrice +"", "");

 update($act);
end

rule 'CUS_HCPCS_LIST_PRICE'
 dialect 'mvel'
salience -95
when
	$c:Claim($CUS_ID:CUS_ID, CUS_ID != null,$providerID:providerID )
	CusContract(ID.intValue() ==$CUS_ID.intValue(),$markup:hspcsMarkUp)
 	$act:Activity($code:code, $type:type,$providerCode:providerCode, type==CodeType.HCPCS, list== null)
 	 RCMFacilityCodeMapping( activityCode==$code,facilityLisence==$providerID, providerActivityCode==$providerCode, $price:price)
then
 String sRuleName = drools.getRule().getName();
 double markUP=($markup==null || $markup<0   )?0.0d :  $markup ;
 double listPrice = ($price==null || $price<0   )?0.0d :  $price ;
double  finalPrice=listPrice+ $markup*listPrice;
 if($c.logInfo){
  logInfo(sRuleName,
 " Set list price "+finalPrice+" =   hcpcs price="+listPrice +" * HCPCS Markup = "+markUP+"");
 }
 $act.setList(finalPrice);

 $act.addOutcome(Severity.INFO, sRuleName ,
 " Set list price "+finalPrice+" =   hcpcs price="+listPrice +" * HCPCS Markup = "+markUP+"", "");

 update($act);
end