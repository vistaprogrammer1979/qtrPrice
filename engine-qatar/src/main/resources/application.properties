consul.host=${CONSUL_HOST:localhost}
consul.port=${CONSUL_PORT:8500}
quarkus.application.name=price-engine-qatar

quarkus.http.port=${HTTP_PORT:4444}
container.name=${HOSTNAME:localhost}

quarkus.consul.host=${HOSTNAME:host.docker.internal}
quarkus.consul.check.http.path=q/health/well

#OpenTelemetry
quarkus.opentelemetry.enabled=true
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://${OTEL_HOST:localhost}:${OTEL_PORT:4317}
quarkus.log.console.format=%d{HH:mm:ss} %-5p [${quarkus.application.name}] traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, [%c{5.}] (%t) %s%e%n
#quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret




quarkus.stork.price-engine.service-discovery.type=consul
quarkus.stork.price-engine.service-discovery.consul-host=${CONSUL_HOST:localhost}
quarkus.stork.price-engine.service-discovery.consul-port=${CONSUL_PORT:8500}
quarkus.stork.price-engine.load-balancer.type=round-robin



quarkus.shutdown.delay-enabled=true
#quarkus.shutdown.delay=10
#quarkus.console.color=true

registration.status=true

## Kafka
## The Kafka broker location (defaults to localhost:9092)
#kafka.bootstrap.servers=localhost:29092
## Configuring the outgoing channel (writing to Kafka)
#mp.messaging.outgoing.price-engine-requests.connector=smallrye-kafka
#mp.messaging.outgoing.price-engine-requests.topic=price-engine
#mp.messaging.outgoing.price-engine-requests.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-requests.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# Kafka
# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=${KAFKA_SERVERS:localhost}:${KAFKA_PORT:29092}
# Configuring the outgoing channel (writing request to Kafka)
mp.messaging.outgoing.price-engine-requests.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-requests.topic=price-engine-request-qatar
mp.messaging.outgoing.price-engine-requests.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-requests.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# Configuring the outgoing channel (writing response to Kafka)
mp.messaging.outgoing.price-engine-responses.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-responses.topic=price-engine-response-qatar
mp.messaging.outgoing.price-engine-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses.topic=price-engine-failure-response-qatar
mp.messaging.outgoing.price-engine-failure-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs.topic=price-engine-log-qatar
mp.messaging.outgoing.price-engine-logs.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

#Swagger
quarkus.swagger-ui.always-include=true
price.cloud.engine.registration.enable-ttl=false