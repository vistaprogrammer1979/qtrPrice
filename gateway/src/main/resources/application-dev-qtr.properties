quarkus.http.port=8080
quarkus.application.name=price-gateway
#Consul
consul.host=local.consul
consul.port=8500

quarkus.stork.price-fact.service-discovery.type=consul
quarkus.stork.price-fact.service-discovery.consul-host=local.consul
quarkus.stork.price-fact.service-discovery.consul-port=8500
quarkus.stork.price-fact.load-balancer.type=round-robin


quarkus.stork.price-cache.service-discovery.type=consul
quarkus.stork.price-cache.service-discovery.consul-host=local.consul
quarkus.stork.price-cache.service-discovery.consul-port=8500
quarkus.stork.price-cache.load-balancer.type=round-robin


#Tracing
#quarkus.otel.metrics.enabled=true

quarkus.otel.exporter.otlp.traces.endpoint=http://local.agent:4317
quarkus.log.console.format=%d{HH:mm:ss} %-5p [${quarkus.application.name}] traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, [%c{5.}] (%t) %s%e%n
quarkus.console.color=true
#DB
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.username=${DB_USERNAME:postgres}
#quarkus.datasource.password=${DB_PASSWORD:postgres}
#quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:5432/${DB_NAME:postgres}
#
##quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/postgres
#quarkus.hibernate-orm.database.generation=update


#DB
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=SA
quarkus.datasource.password=P@ssw0rd123
quarkus.datasource.jdbc.url=jdbc:postgresql://local.postgres:5432/SA
quarkus.hibernate-orm.database.default-schema=price
##quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/postgres
#quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=false
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.min-size=2
quarkus.hibernate-orm.physical-naming-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy


# #Kafka
# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=local.kafka:9092
# Configuring the outgoing channel (writing request to Kafka)
mp.messaging.outgoing.price-engine-requests.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-requests.topic=price-engine-request
mp.messaging.outgoing.price-engine-requests.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-requests.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# Configuring the outgoing channel (writing response to Kafka)
mp.messaging.outgoing.price-engine-responses.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-responses.topic=price-engine-response
mp.messaging.outgoing.price-engine-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses.topic=price-engine-failure-response
mp.messaging.outgoing.price-engine-failure-responses.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs.topic=price-engine-log
mp.messaging.outgoing.price-engine-logs.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

## Qatar

# Configuring the outgoing channel (writing response to Kafka)
mp.messaging.outgoing.price-engine-responses-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-responses-qatar.topic=price-engine-response-qatar
mp.messaging.outgoing.price-engine-responses-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses-qatar.topic=price-engine-failure-response-qatar
mp.messaging.outgoing.price-engine-failure-responses-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs-qatar.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs-qatar.topic=price-engine-log-qatar
mp.messaging.outgoing.price-engine-logs-qatar.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

## KSA
# Configuring the outgoing channel (writing response to Kafka)
mp.messaging.outgoing.price-engine-responses-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-responses-ksa.topic=price-engine-response-ksa
mp.messaging.outgoing.price-engine-responses-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing failure response to Kafka)
mp.messaging.outgoing.price-engine-failure-responses-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-failure-responses-ksa.topic=price-engine-failure-response-ksa
mp.messaging.outgoing.price-engine-failure-responses-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the outgoing channel (writing logs to Kafka)
mp.messaging.outgoing.price-engine-logs-ksa.connector=smallrye-kafka
mp.messaging.outgoing.price-engine-logs-ksa.topic=price-engine-log-ksa
mp.messaging.outgoing.price-engine-logs-ksa.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
#mp.messaging.outgoing.price-engine-responses.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


quarkus.swagger-ui.always-include=true